{"title":"shell程序设计","slug":"shell程序设计","date":"2019-09-09T02:17:55.695Z","updated":"2018-06-17T15:56:16.000Z","comments":true,"path":"api/articles/shell程序设计.json","photos":[],"link":"","excerpt":"shell脚本的建立与执行shell是一个交互式的命令解释程序，同时也是一个脚本式程序设计语言，shell是Unix/Linux系统的标准组成部分，在多年的发展和完善过程中，shell形成了很多版本，现在较为流行的有sh、bash、csh和ksh，各个版本之间存在着不兼容的问题，本章主要介绍bash的程序设计。<br>","covers":["http://upload-images.jianshu.io/upload_images/11634944-8819b1ec6bde1fe6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600"],"content":"<hr>\n<hr>\n<h1 id=\"shell脚本的建立与执行\"><a href=\"#shell脚本的建立与执行\" class=\"headerlink\" title=\"shell脚本的建立与执行\"></a>shell脚本的建立与执行</h1><p>shell是一个交互式的命令解释程序，同时也是一个脚本式程序设计语言，shell是Unix/Linux系统的标准组成部分，在多年的发展和完善过程中，shell形成了很多版本，现在较为流行的有sh、bash、csh和ksh，各个版本之间存在着不兼容的问题，本章主要介绍bash的程序设计。<br><a id=\"more\"></a></p>\n<h4 id=\"建立shell程序脚本文件\"><a href=\"#建立shell程序脚本文件\" class=\"headerlink\" title=\"建立shell程序脚本文件\"></a>建立shell程序脚本文件</h4><p>通常在用脚本式语言编写的程序文件的第一行都会用特殊的注释格式来申明脚本解释器，比如shell程序的第一行是“#! /bin/bash”，python程序的第一行是“#! /bin/python”，在“#!”后跟着解释器执行文件全路径名。</p>\n<p>以下是一个shell程序例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">wj@wj-VirtualBox:~/sample/7.1$ cat hello.sh</span><br><span class=\"line\"> \\#! /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;What is your name?&quot;</span><br><span class=\"line\">read person</span><br><span class=\"line\">echo &quot;Hello, $person!&quot;</span><br></pre></td></tr></table></figure></p>\n<p>上面文件hello.sh是一个shell程序脚本，shell程序文件有时以“.sh”作为后缀名，但这不是必须的。</p>\n<p>上面的程序三条语句分别写在三行上，如果要在一行上写多条语句，语句后面必须加分号“;”。</p>\n<h4 id=\"执行shell程序\"><a href=\"#执行shell程序\" class=\"headerlink\" title=\"执行shell程序\"></a>执行shell程序</h4><p>执行shell程序的方法有三种：</p>\n<p>第一种方式是执行命令“bash 程序文件”。<br>第二种方式是将程序文件加上执行权限，然后直接执行，通常我们会将写好的shell程序放在“~/bin”目录中，并在环境变量PATH中增加这个目录路径，这样写好的shell程序就可以作为一般的命令来执行了。<br>第三种方式是source命令和点命令的方式来执行shell程序，这种方式是将shell程序直接在原来的shell中执行，而不会像前两种方式一样新启动一个shell进程来执行。<br>下面是执行shell程序三种方式的示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~/test$ bash hello.sh</span><br><span class=\"line\">What is your name?</span><br><span class=\"line\">Wan Jian</span><br><span class=\"line\">Hello, Wan Jian!</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ chmod +x hello.sh</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ ./hello.sh</span><br><span class=\"line\">What is your name?</span><br><span class=\"line\">Wan Jian</span><br><span class=\"line\">Hello, Wan Jian!</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ source hello.sh</span><br><span class=\"line\">What is your name?</span><br><span class=\"line\">Wan Jian</span><br><span class=\"line\">Hello, Wan Jian!</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><h4 id=\"变量的赋值\"><a href=\"#变量的赋值\" class=\"headerlink\" title=\"变量的赋值\"></a>变量的赋值</h4><p>shell允许定义变量，和通常的脚本一样，变量不需要事先声明，也不需要指定数据类型。当程序第一次执行到变量赋值语句时，系统里即生成了这个变量。</p>\n<p>变量赋值语句有两种格式：</p>\n<p>变量名=字符串<br>变量名=”字符串”<br>当字符串中含有空格，必须用第二种格式，用引号将字符串括起来。注意赋值语句中的“=”两边不能有空格。</p>\n<p>如果要删除一个变量，可能用unset命令，格式如下：</p>\n<p>unset 变量名</p>\n<p>以下是变量赋值的示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~/test$ a=hello</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ b=&quot;hello world&quot;</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $a</span><br><span class=\"line\">hello</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $b</span><br><span class=\"line\">hello world</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ unset a</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $a</span><br><span class=\"line\"></span><br><span class=\"line\">wj@wj-VirtualBox:~/test$</span><br></pre></td></tr></table></figure>\n<h4 id=\"变量的引用\"><a href=\"#变量的引用\" class=\"headerlink\" title=\"变量的引用\"></a>变量的引用</h4><p>shell程序中变量的引用有两种格式：</p>\n<p>$变量名<br>${变量名}<br>当引用变量时，可以作为一个长字符串的一部分，如果它在长字符串的末尾，就可以利用直接引用形式。变量名出现在一个长字符串的开头或者中间，应该用 “{}” 把变量名括起来。如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~/test$ s=ing</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo walk$1 read$1 </span><br><span class=\"line\">walk read</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ s=ing</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo walk$s read$s</span><br><span class=\"line\">walking reading</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ dir=/home/wj</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;dir&#125;/a.c</span><br><span class=\"line\">/home/wj/a.c</span><br></pre></td></tr></table></figure></p>\n<p>除了上述两种变量的引用方式以外，还有以下几种对变量的取值方式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表达式</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">${var}</td>\n<td style=\"text-align:left\">变量var的值, 与$var相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">${var-DEFAULT}</td>\n<td style=\"text-align:left\">如果var没有被声明, 表达式的值为DEFAULT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">${var:-DEFAULT}</td>\n<td style=\"text-align:left\">如果var没有被声明, 或者其值为空，表达式的值为DEFAULT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">${var=DEFAULT}</td>\n<td style=\"text-align:left\">如果var没有被声明, 表达式和变量var的值均为DEFAULT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">${var:=DEFAULT}</td>\n<td style=\"text-align:left\">如果var没有被声明, 或者其值为空, 表达式和变量var的值均为DEFAULT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">${var+OTHER}</td>\n<td style=\"text-align:left\">如果var声明了, 表达式的值为OTHER, 否则就为空串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">${var:+OTHER}</td>\n<td style=\"text-align:left\">如果var被设置了, 表达式的值为OTHER, 否则就为空串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">${var?ERR_MSG}</td>\n<td style=\"text-align:left\">如果var没被声明, 那么就打印ERR_MSG </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">${var:?ERR_MSG}</td>\n<td style=\"text-align:left\">如果var没被设置, 那么就打印ERR_MSG </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">${!varprefix*}</td>\n<td style=\"text-align:left\">匹配之前所有以varprefix开头进行声明的变量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">${!varprefix@}</td>\n<td style=\"text-align:left\">匹配之前所有以varprefix开头进行声明的变量</td>\n</tr>\n</tbody>\n</table>\n<p>上面表格中的用法示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~/test$ unset var                   删除变量var，命令执行后变量var不存在</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;var-hello&#125;</span><br><span class=\"line\">hello</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $var</span><br><span class=\"line\"></span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ var=                        将变量值设置为空</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;var-hello&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;var:-hello&#125;</span><br><span class=\"line\">hello</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ unset var</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;var=hello&#125;</span><br><span class=\"line\">hello</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $var                   变量var的值同时被设置了</span><br><span class=\"line\">hello</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ var=</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;var:=hello&#125;</span><br><span class=\"line\">hello</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $var</span><br><span class=\"line\">hello</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ unset var</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;var?The variable not existing&#125;</span><br><span class=\"line\">bash: var: The variable not existing</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ var=</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;var:?The variable is null&#125;</span><br><span class=\"line\">bash: var: The variable is null</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ var=</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;var+Hello&#125;</span><br><span class=\"line\">Hello</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ var=hello</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;var:+Hello&#125;</span><br><span class=\"line\">Hello</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ var1=a</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ var2=b</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;!var*&#125;               显示所有名字以“var”开头的变量</span><br><span class=\"line\">var var1 var2</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"只读变量\"><a href=\"#只读变量\" class=\"headerlink\" title=\"只读变量\"></a>只读变量</h4><p>可以把变量声明为只读，格式为</p>\n<p>readonly 变量名</p>\n<p>将变量声明为只读后再对它赋值，将会出错，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~/test$ readonly dir</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ dir=/etc</span><br><span class=\"line\">bash: dir: readonly variable</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h1><h4 id=\"字符串操作概述\"><a href=\"#字符串操作概述\" class=\"headerlink\" title=\"字符串操作概述\"></a>字符串操作概述</h4><p>在shell程序中对字符串的操作有：</p>\n<ul>\n<li>计算长度</li>\n<li>截取子串</li>\n<li>替换子串</li>\n</ul>\n<p>这些操作罗列如下：<br>| 表示法 | 含义 |<br>| :-: | :-|<br>|${ #string} | 计算$string的长度<br>|${string:position} | 在string中, 从位置position开始提取子串<br>|${string:position:length} | 在string中, 从位置position开始提取长度为length的子串<br>|${string #substring} | 从变量string的开头, 删除最短匹配substring的子串<br>|${string # #substring} | 从变量string的开头, 删除最长匹配substring的子串<br>|${string%substring} | 从变量string的结尾, 删除最短匹配substring的子串<br>|${string%%substring} | 从变量string的结尾, 删除最长匹配substring的子串<br>|${string/substring/replacement} | 使用replacement, 来代替第一个匹配的substring<br>|${string//substring/replacement} | 使用replacement, 代替所有匹配的substring<br>|${string/ #substring/replacement} | 如果string的前缀匹配substring, 那么就用replacement来代替匹配到的substring<br>|${string/%substring/replacement} | 如果string的后缀匹配substring, 那么就用replacement来代替匹配到的substring</p>\n<p>在上面的表格中，substring是用于匹配的样式，这样式可以是一般的字符串，也可以是带通配符的字符串（非正则表达式）。</p>\n<h4 id=\"示例1：取字符串的长度\"><a href=\"#示例1：取字符串的长度\" class=\"headerlink\" title=\"示例1：取字符串的长度\"></a>示例1：取字符串的长度</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre style=&quot;padding: 9.5px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 13px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 10px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.15);&quot;&gt;wj@wj-VirtualBox:~/test$ s=&quot;Hello, world!&quot;</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;#s&#125;</span><br><span class=\"line\">13</span><br><span class=\"line\">&lt;/pre&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例2：提取子串\"><a href=\"#示例2：提取子串\" class=\"headerlink\" title=\"示例2：提取子串\"></a>示例2：提取子串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre style=&quot;padding: 9.5px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 13px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 10px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.15);&quot;&gt;wj@wj-VirtualBox:~/test$ s=&quot;Hello, world!&quot;</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;s:7&#125;</span><br><span class=\"line\">world!</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;s:7:5&#125;</span><br><span class=\"line\">world</span><br><span class=\"line\">&lt;/pre&gt;</span><br></pre></td></tr></table></figure>\n<p>示例3：按样式去除子串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre style=&quot;padding: 9.5px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 13px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 10px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.15);&quot;&gt;wj@wj-VirtualBox:~/test$ filepath=/home/wj/test/a.c</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;filepath#/home&#125;</span><br><span class=\"line\">/wj/test/a.c</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;filepath##*/&#125;</span><br><span class=\"line\">a.c</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;filepath%/*&#125;</span><br><span class=\"line\">/home/wj/test</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ filepath=c:\\\\windows\\\\boot.ini</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $filepath</span><br><span class=\"line\">c:\\windows\\boot.ini</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;filepath%%\\\\*&#125;</span><br><span class=\"line\">c:&lt;/pre&gt;</span><br></pre></td></tr></table></figure></p>\n<p>示例4：替换子串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre style=&quot;padding: 9.5px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 13px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 10px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.15);&quot;&gt;wj@wj-VirtualBox:~/test$ s=123abc123abc</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;s/abc/ABC&#125;</span><br><span class=\"line\">123ABC123abc</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;s//abc/ABC&#125;</span><br><span class=\"line\">123ABC123ABC</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;s/abc*abc/xyz&#125;</span><br><span class=\"line\">123xyz</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ filepath=/home/wj.test/a.JPG</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;filepath/#\\/home\\/wj/\\~\\/&#125;</span><br><span class=\"line\">~/.test/a.JPG</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $&#123;filepath/%jpg/JPG&#125;</span><br><span class=\"line\">/home/wj.test/a.JPG&lt;/pre&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"计算\"><a href=\"#计算\" class=\"headerlink\" title=\"计算\"></a>计算</h1><h4 id=\"算术求值\"><a href=\"#算术求值\" class=\"headerlink\" title=\"算术求值\"></a>算术求值</h4><p>shell可以对整数进行算术运算，基本格式是：</p>\n<p>$((expression))</p>\n<p>上面的expression是一个算术表达式，示例如下：</p>\n<p>wj@wj-VirtualBox:~$ echo $((2*3))<br>6</p>\n<h4 id=\"数的进制\"><a href=\"#数的进制\" class=\"headerlink\" title=\"数的进制\"></a>数的进制</h4><p>在shell中一个整数可以用不同的进制来表示，其格式如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表示法</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:left\">默认的表示法，10进制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0number</td>\n<td style=\"text-align:left\">以0开始的数字，8进制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0xnumber</td>\n<td style=\"text-align:left\">以0x开始的数字，16进制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">base#number</td>\n<td style=\"text-align:left\">任意进制，base为底，如2#number是二进制</td>\n</tr>\n</tbody>\n</table>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ echo $((0xff))</span><br><span class=\"line\">255</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $((0177))</span><br><span class=\"line\">127</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $((0377))</span><br><span class=\"line\">255</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $((2#11111111))</span><br><span class=\"line\">255</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h4><p>shell的运算符和C语言的运算符类似，罗列如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">一元符号运算符</td>\n<td style=\"text-align:left\">+ -</td>\n<td style=\"text-align:left\">用于说明整数的正负。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">算术运算符</td>\n<td style=\"text-align:left\">+ - * / % **</td>\n<td style=\"text-align:left\">其中“**”是幂运算符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">赋值运算符</td>\n<td style=\"text-align:left\">= += -= *= /= %=     </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">自增、自减运算符</td>\n<td style=\"text-align:left\">++ –</td>\n<td style=\"text-align:left\">“++”和“–”可以放在变量的前面或后面，分别表示自增自减运算是在表示式求值之前还是之 后。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">位运算符</td>\n<td style=\"text-align:left\">~ &lt;&lt; &gt;&gt; &amp;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">比较与逻辑运算符</td>\n<td style=\"text-align:left\">&lt; &gt; &lt;= &gt;= == != &amp;&amp;</td>\n<td style=\"text-align:left\"></td>\n<td>?:    </td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"高精度计算器-bc命令\"><a href=\"#高精度计算器-bc命令\" class=\"headerlink\" title=\"高精度计算器 - bc命令\"></a>高精度计算器 - bc命令</h4><p>shell只能处理整数，不能处理浮点数，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ echo $((3/2))</span><br><span class=\"line\">1</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $((3.1/2.1))</span><br><span class=\"line\">bash: 3.1/2.1: syntax error: invalid arithmetic operator (error token is &quot;.1/2.1&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>从上例中可以看到，当试图用shell进行浮点运算时，系统会提示错误信息。但在Linux中，我们可以用bc命令来对浮点数进行运算，bc是一个高精度的计算器，它既是一个交互的计算工具，又有自己的脚本语言，可以编写程序来进行计算。</p>\n<p>bc的交互计算如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ bc</span><br><span class=\"line\">bc 1.06.95</span><br><span class=\"line\">Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software with ABSOLUTELY NO WARRANTY.</span><br><span class=\"line\">For details type `warranty&apos;. </span><br><span class=\"line\">5/3</span><br><span class=\"line\">1</span><br><span class=\"line\">scale</span><br><span class=\"line\">0</span><br><span class=\"line\">scale=5</span><br><span class=\"line\">5/3</span><br><span class=\"line\">1.66666</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure></p>\n<p>上例中交互输入“5/3”，计算结果为1，小数点后全部舍弃了，查看内部变量scale的值，此时为0，表示计算结果保留小数点后0位。当把scale赋值为5时，再计算“5/3”，此结果就保留小数点后5位了。</p>\n<p>bc中还可以用脚本语言定义函数，在下面的例子中，定义了一个计算阶段的函数，然后调用这个函数输出计算结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ bc</span><br><span class=\"line\">bc 1.06.95</span><br><span class=\"line\">Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software with ABSOLUTELY NO WARRANTY.</span><br><span class=\"line\">For details type `warranty&apos;. </span><br><span class=\"line\">define factorial(x) &#123;</span><br><span class=\"line\">    if (x &lt;= 1)</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    return x * factorial(x-1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(5)</span><br><span class=\"line\">120</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure></p>\n<p>可以把上面的程序写入一个文件中，然后输入重定向到bc进行运算，或者通过管道传送给bc，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">wj@wj-VirtualBox:~$ cat fac.bc</span><br><span class=\"line\">define factorial(x) &#123;</span><br><span class=\"line\">    if (x &lt;= 1)</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    return x * factorial(x-1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial(5)</span><br><span class=\"line\">wj@wj-VirtualBox:~$ bc &lt; fac.bc</span><br><span class=\"line\">120</span><br><span class=\"line\">wj@wj-VirtualBox:~$ cat fac.bc | bc</span><br><span class=\"line\">120</span><br></pre></td></tr></table></figure></p>\n<p>如果要在shell中进行计算，并将计算结果保存在另一个变量中，可以按下面的方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ a=5</span><br><span class=\"line\">wj@wj-VirtualBox:~$ b=3</span><br><span class=\"line\">wj@wj-VirtualBox:~$ c=\\`echo &quot;scale=5;$&#123;a&#125;/$&#123;b&#125;&quot; | bc\\`</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $c</span><br><span class=\"line\">1.66666</span><br></pre></td></tr></table></figure></p>\n<p>上例将a和b两个变量相除，其结果存入变量c中。注意两个反引号“`….`”在Linux中起着命令替换的作用，命令替换是指shell能够将一个命令的标准输出插在一个命令行中任何位置，这此例中，就是先执行反引号之前的命令，其标准输出“1.66666”再插入到对变量c赋值的命令中。</p>\n<h4 id=\"expr命令\"><a href=\"#expr命令\" class=\"headerlink\" title=\"expr命令\"></a>expr命令</h4><p>expr命令是另一种进行算术运算的方式，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ x=3</span><br><span class=\"line\">wj@wj-VirtualBox:~$ y=2</span><br><span class=\"line\">wj@wj-VirtualBox:~$ expr $x + $y</span><br><span class=\"line\">5</span><br><span class=\"line\">wj@wj-VirtualBox:~$ expr $x / $y</span><br><span class=\"line\">1</span><br><span class=\"line\">wj@wj-VirtualBox:~$ expr $x \\* $y</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure></p>\n<p><strong>要注意两点：一是expr命令中运算符左右必须有空格，二是进行乘法运算时必须用“*”符号</strong></p>\n<h1 id=\"if语句和测试命令\"><a href=\"#if语句和测试命令\" class=\"headerlink\" title=\"if语句和测试命令\"></a>if语句和测试命令</h1><h4 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h4><p>在shell语言中，if语句的基本结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if commands; then</span><br><span class=\"line\">     commands</span><br><span class=\"line\">[elif commands; then</span><br><span class=\"line\">     commands...]</span><br><span class=\"line\">[else</span><br><span class=\"line\">     commands]</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></p>\n<p>上面格式里commands可以是一条或多条命令，这个命令可以是用户自己开发的程序。Linux的命令都会给操作系统一个返回值，返回0表示成功，返回非0表示失败（注意和C语言中非0表示真值、0表示假值有区别）。</p>\n<p>下面是if语句的一个例子，假设当前目录下存在文件a，不存在文件b：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ if ls a; then echo &quot;existing&quot;; else echo &quot;not existing&quot;; fi</span><br><span class=\"line\">a</span><br><span class=\"line\">existing</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if ls b; then echo &quot;existing&quot;; else echo &quot;not existing&quot;; fi</span><br><span class=\"line\">ls: cannot access &apos;b&apos;: No such file or directory</span><br><span class=\"line\">not existing</span><br><span class=\"line\">wj@wj-VirtualBox:~$ ls a</span><br><span class=\"line\">a</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">wj@wj-VirtualBox:~$ ls b</span><br><span class=\"line\">ls: cannot access &apos;b&apos;: No such file or directory</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $?</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure></p>\n<p>系统变量“$?”可以用于检查上一条所执行的命令的返回值（也叫命令的退出状态）。上例中“ls a”命令返回为0，表示程序成功执行；“ls b”命令返回为2，表示程序返回错误。</p>\n<p>C语言程序中main函数的返回值就是这个程序返回给操作系统的返回值，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ cat a.c</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">wj@wj-VirtualBox:~$ gcc a.c</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if ./a.out; then echo success; else echo fail; fi</span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure></p>\n<p>如果“if commands; then…”结构中的“commands”是多条命令，则这一组命令的返回值是最后一条命令的返回值。</p>\n<p>测试命令</p>\n<p>test命令是Linux中的一个测试命令，有两种格式：</p>\n<p>test expression<br>[ expression ]<br>注意在第二种格式中，表达式expression的左右必须有空格。下例是测试命令的用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ x=5</span><br><span class=\"line\">wj@wj-VirtualBox:~$ test $x = 5</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">wj@wj-VirtualBox:~$ test $x = 6</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $?</span><br><span class=\"line\">1</span><br><span class=\"line\">wj@wj-VirtualBox:~$ [ $x = 5 ]</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">wj@wj-VirtualBox:~$ [ $x = 6 ]</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $?</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></p>\n<p>另外要注意的一点是，“$x = 5”是用于比较相等的表达式，在等号左右也必须有空格，“x=5”是赋值语句，等号左右不能有空格。</p>\n<p>关系运算符</p>\n<p>关系运算符只支持整数，不支持浮点数或非整数的字符串。关系运算符有以下一些</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-eq</td>\n<td style=\"text-align:left\">检测两个数是否相等，相等返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-ne</td>\n<td style=\"text-align:left\">检测两个数是否不相等，不相等返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gt</td>\n<td style=\"text-align:left\">检测左边的数是否大于右边的，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-lt</td>\n<td style=\"text-align:left\">检测左边的数是否小于右边的，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-ge</td>\n<td style=\"text-align:left\">检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-le</td>\n<td style=\"text-align:left\">检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p>以下是关系运算符的示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ x=3</span><br><span class=\"line\">wj@wj-VirtualBox:~$ y=2</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ $x -gt $y ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><p>逻辑运算符有以下一些：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">!</td>\n<td style=\"text-align:left\">非运算，表达式为 true 则返回 false，否则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-o</td>\n<td style=\"text-align:left\">或运算，有一个表达式为 true 则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-a</td>\n<td style=\"text-align:left\">与运算，两个表达式都为 true 才返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p>以下是逻辑运算符的示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ x=4</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ ! $x -gt 3 ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">FALSE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ $x -gt 3 -a $x -lt 5 ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br></pre></td></tr></table></figure></p>\n<p>字符串比较运算符</p>\n<p>用于字符串比较的运算符有以下一些：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:left\">说明 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">=或==</td>\n<td style=\"text-align:left\">检测两个字符串是否相等，相等返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:left\">检测两个字符串是否相等，不相等返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:left\">第一个字符串排在第二个字符串之后。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:left\">第二个字符串排在第二个字符串之前。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-z</td>\n<td style=\"text-align:left\">检测字符串长度是否为0，为0返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-n</td>\n<td style=\"text-align:left\">检测字符串长度是否为0，不为0返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">str</td>\n<td style=\"text-align:left\">检测字符串是否为空，不为空返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p> 以下是字符串比较运算符的示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ s1=</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ $s1 ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">FALSE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ s1=abc</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ $s1 ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ s2=abc</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ $s1 = $s2 ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ s2=acc</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ $s1 \\&lt; $s2 ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ $s1 \\&gt; $s2 ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">FALSE</span><br></pre></td></tr></table></figure></p>\n<p>上例的最后两条命令比较s1和s2的字典先后顺序时用到的“&lt;”和“&gt;”运算符必须用转义符“\\”，因为不用转义符的话“&lt;”和“&gt;”会被理解成输入/输出重定向。</p>\n<h4 id=\"文件测试运算符\"><a href=\"#文件测试运算符\" class=\"headerlink\" title=\"文件测试运算符\"></a>文件测试运算符</h4><p>文件测试运算符用于检测文件的属性，有以下一些：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-b file</td>\n<td style=\"text-align:left\">检测文件是否是块设备文件，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-c file</td>\n<td style=\"text-align:left\">检测文件是否是字符设备文件，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d file</td>\n<td style=\"text-align:left\">检测文件是否是目录，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-f file</td>\n<td style=\"text-align:left\">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-g file</td>\n<td style=\"text-align:left\">检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-k file</td>\n<td style=\"text-align:left\">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-p file</td>\n<td style=\"text-align:left\">检测文件是否是有名管道，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-u file</td>\n<td style=\"text-align:left\">检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-r file</td>\n<td style=\"text-align:left\">检测文件是否可读，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-w file</td>\n<td style=\"text-align:left\">检测文件是否可写，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-x file</td>\n<td style=\"text-align:left\">检测文件是否可执行，如果是，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-s file</td>\n<td style=\"text-align:left\">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-e file</td>\n<td style=\"text-align:left\">检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p>以下是文件测试运算符的示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ ls -l a.c</span><br><span class=\"line\">-rw-r--r-- 1 wj wj 49 May 14 20:03 a.c</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ -f a.c ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ -r a.c ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ -w a.c ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ -x a.c ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">FALSE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ ls -ld test</span><br><span class=\"line\">drwxr-xr-x 2 wj wj 4096 May  7 14:16 test</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ -f test ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">FALSE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [ -d test ]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"更现代的测试命令\"><a href=\"#更现代的测试命令\" class=\"headerlink\" title=\"更现代的测试命令\"></a>更现代的测试命令</h4><p>如果是涉及整数的运算，我们可以用“((expression))”来计算表达式的值，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ x=4</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if ((x&gt;3 &amp;&amp; x&lt;5)); then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if ((!(x&gt;3 &amp;&amp; x&lt;5))); then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">FALSE</span><br></pre></td></tr></table></figure></p>\n<p>我们还可以用“[[ expression ]]”来加强测试命令，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ x=4</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [[ $x &gt; 3 &amp;&amp; $x &lt; 5 ]]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [[ ! ($x &gt; 3 &amp;&amp; $x &lt; 5) ]]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">FALSE</span><br></pre></td></tr></table></figure></p>\n<p>在上例中，可以用“&gt;”和“&lt;”符号来代替“-gt”和“-lt”运算符，用“&amp;&amp;”来代替“-a”运算符，注意“[[”的后面和“]]”的前面要有空格，“!”后面要有空格。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“[[ expression ]]”中的表达式支持正则表达式匹配运算符“=~”，其使用格式为：</span><br><span class=\"line\"></span><br><span class=\"line\">string =~ regex</span><br></pre></td></tr></table></figure></p>\n<p>下例是一个用正则表达式检查表示时间的字符串是否正确的示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ time=&quot;15:23:42&quot;</span><br><span class=\"line\">wj@wj-VirtualBox:~$ regex=&quot;^(([0-1]?[0-9])|(2[0-3])):[0-5]?[0-9]:[0-5]?[0-9]$&quot;</span><br><span class=\"line\">wj@wj-VirtualBox:~$ if [[ $time =~ $regex ]]; then echo TRUE; else echo FALSE; fi</span><br><span class=\"line\">TRUE</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"控制运算符\"><a href=\"#控制运算符\" class=\"headerlink\" title=\"控制运算符\"></a>控制运算符</h4><p>bash 支持两种可以执行分支任务的控制操作符：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command1 &amp;&amp; command2：先执行command1，如果command1执行成功，则去执行command2。</span><br><span class=\"line\">command1 || comand2：先执行command1，如果command1执行失败，则去执行command2。</span><br></pre></td></tr></table></figure></p>\n<p>“&amp;&amp;”运算符的示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ ls -ld temp</span><br><span class=\"line\">ls: cannot access &apos;temp&apos;: No such file or directory</span><br><span class=\"line\">wj@wj-VirtualBox:~$ mkdir temp &amp;&amp; cd temp</span><br><span class=\"line\">wj@wj-VirtualBox:~/temp$ cd /</span><br><span class=\"line\">wj@wj-VirtualBox:/$ mkdir temp &amp;&amp; cd temp</span><br><span class=\"line\">mkdir: cannot create directory ‘temp’: Permission denied</span><br><span class=\"line\">上例中在当前工作目录下temp目录不存在，执行“mkdir temp &amp;&amp; temp”，创建temp目录成功后，再将当前工作目录转到~/temp。如果当前目录是/，无写权限，此时再执行同样的命令，“mkdir temp”命令创建目录失败，也不执行：“cd temp”命令。</span><br></pre></td></tr></table></figure></p>\n<p>“||”运算符的示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ ls -ld temp</span><br><span class=\"line\">drwxr-xr-x 2 wj wj 4096 May 15 07:53 temp</span><br><span class=\"line\">wj@wj-VirtualBox:~$ [ -d temp ] || mkdir temp</span><br><span class=\"line\">wj@wj-VirtualBox:~$ rmdir temp</span><br><span class=\"line\">wj@wj-VirtualBox:~$ ls -ld temp</span><br><span class=\"line\">ls: cannot access &apos;temp&apos;: No such file or directory</span><br><span class=\"line\">wj@wj-VirtualBox:~$ [ -d temp ] || mkdir temp</span><br><span class=\"line\"></span><br><span class=\"line\">wj@wj-VirtualBox:~$ ls -ld temp</span><br><span class=\"line\">drwxr-xr-x 2 wj wj 4096 May 15 07:58 temp</span><br></pre></td></tr></table></figure></p>\n<p>上例中如果temp目录存在，执行“ [ -d temp ] || mkdir temp”命令，“[ -d temp ]测试成功，就不执行“mkdir temp”命令。在删除temp目录后，执行同样的命令，会去创建temp目录。<br>读取键盘输入 - read命令</p>\n<h1 id=\"read命令\"><a href=\"#read命令\" class=\"headerlink\" title=\"read命令\"></a>read命令</h1><p>read命令是用于从终端或者文件中读取输入的内部命令，read命令的格式为：</p>\n<p>read [-options] [variables]</p>\n<p>read命令读取整行输入，每行末尾的换行符不被读入。在read命令后面，如果没有指定变量名，读取的数据将被自动赋值给特定的变量REPLY。</p>\n<p>read命令的选项有：</p>\n<blockquote>\n<p>-a array：把输入赋值到数组 array 中。<br>-d delimiter：用字符串 delimiter 中的第一个字符指示输入结束，而不是 一个换行符。<br>-n num：读取 num 个输入字符，而不是整行，此时不需键入回车符。<br>-p prompt：为输入显示提示信息，使用字符串 prompt。<br>-r：原始模式（Raw mode），即不把反斜杠字符解释为转义字符。<br>-s：静默模式（Silent mode），即不会在屏幕上显示输入的字符。可以用在输入密码和其它确认信息。<br>-t seconds：超时时间，即在几秒钟后终止输入，若输入超时，read 会返回一个非零退出状态。</p>\n</blockquote>\n<p>下面是一个read命令的用法示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~/test$ cat sum.sh</span><br><span class=\"line\">#! /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">echo -n &quot;enter two integers: &quot;</span><br><span class=\"line\">read v1 v2</span><br><span class=\"line\">echo &quot;sum of two integers: $((v1+v2))&quot; </span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ bash sum.sh</span><br><span class=\"line\">enter two integers: 2 3</span><br><span class=\"line\">sum of two integers: 5</span><br></pre></td></tr></table></figure></p>\n<p>上例中第一条echo语句使用“-n”选项，在输出的行末不加上换行符。程序中利用read命令将两个整数的值读入变量v1和v2中。第二条echo输出计算结果，注意后面的输出内容用双引号括起来，这样“$((v1+v2))”会展开成计算结果，如果用单引号，“$((v1+v2))”不进行计算后展开，而且直接输出“$((v1+v2))”这个字符串，如果用单引号，这条语句还可以写成“echo ‘sum of two intger:’ $((v1+v2))”，把“$((v1+v2))”放在单引号外，就可以实现展开计算结果的效果。</p>\n<p>从Here Document中读入数据</p>\n<p>我们可以用输入重定向的方式将一个文件的内容作为read命令读入的数据源，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~/test$ cat x</span><br><span class=\"line\">2 3</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ read a b &lt; x</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $a $b</span><br><span class=\"line\">2 3</span><br></pre></td></tr></table></figure></p>\n<p>read命令默认是从标准输入设备中读入数据，利用输入重定向，可以将标准输入设备替换成一般的文件。在上例中文件x里存放了两个整数，将这个文件重定向给read命令，作为它的输入源。</p>\n<p>但是利用管道给read命令提供读入的数据会发生错误，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~/test$ unset a b</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ cat x</span><br><span class=\"line\">2 3</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ cat x | read a b</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $a $b</span><br><span class=\"line\"></span><br><span class=\"line\">wj@wj-VirtualBox:~/test$</span><br></pre></td></tr></table></figure></p>\n<p>从上例中可以看到变量a和b中并没有读入数据，其原因在于经过管道后，是通过创新一个新的shell进程来执行“read a b”命令的，此时a和b变量是这个新shell进程的变量，而不是原来shell进程的变量，所以在原来的shell进程中依然找不到变量a和b。</p>\n<p>利用“&lt;”可以实现将文件重定向为一个命令的输入，利用“&lt;&lt; ”可以实现将一个多行文本重定向为一个命令的输入，这个文本叫做Here Documnet，其使用格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command &lt;&lt; eofstring</span><br><span class=\"line\"></span><br><span class=\"line\">Here Document</span><br><span class=\"line\"></span><br><span class=\"line\">eofstring</span><br></pre></td></tr></table></figure></p>\n<p>上面格式中eofstring是一个自定义的结束标记字符串，表示内嵌的多行文本到此结束，具体用法参看下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~/test$ cat &lt;&lt; EOF</span><br><span class=\"line\">&gt; Here is a document</span><br><span class=\"line\">&gt; Hello, World!</span><br><span class=\"line\">&gt; EOF</span><br><span class=\"line\">Here is a document</span><br><span class=\"line\">Hello, World!</span><br></pre></td></tr></table></figure></p>\n<p>Here Document重定向的另一个符号是“&lt;&lt;- ”，如果使用这个符号，作为Here Documnet的多行文本每行前面的tab字符将被省略。</p>\n<p>Here Document可以和read命令结合使用，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~/test$ read a b &lt;&lt; EOF</span><br><span class=\"line\">&gt; 2 3</span><br><span class=\"line\">&gt; EOF</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $a $b</span><br><span class=\"line\">2 3</span><br></pre></td></tr></table></figure></p>\n<p>如果是单行文本，还可以使用另一个重定向符号“&lt;&lt;&lt;”，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~/test$ read a b &lt;&lt;&lt; &quot;2 3&quot;</span><br><span class=\"line\">wj@wj-VirtualBox:~/test$ echo $a $b</span><br><span class=\"line\">2 3</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"IFS分隔符\"><a href=\"#IFS分隔符\" class=\"headerlink\" title=\"IFS分隔符\"></a>IFS分隔符</h4><p>在一般情况下，read读入的原始字符串是按空格来分隔各变量的值的，可以通过设置变量IFS来改变分隔符，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\#!/bin/bash</span><br><span class=\"line\"># read-ifs: read fields from a file</span><br><span class=\"line\">FILE=/etc/passwd</span><br><span class=\"line\">read -p &quot;Enter a user name &gt; &quot; user_name</span><br><span class=\"line\">file_info=$(grep &quot;^$user_name:&quot; $FILE)</span><br><span class=\"line\">if [ -n &quot;$file_info&quot; ]; then</span><br><span class=\"line\">    IFS=&quot;:&quot; read user pw uid gid name home shell &lt;&lt;&lt; &quot;$file_info&quot;</span><br><span class=\"line\">    echo &quot;User = &apos;$user&apos;&quot;</span><br><span class=\"line\">    echo &quot;UID = &apos;$uid&apos;&quot;</span><br><span class=\"line\">    echo &quot;GID = &apos;$gid&apos;&quot;</span><br><span class=\"line\">    echo &quot;Full Name = &apos;$name&apos;&quot;</span><br><span class=\"line\">    echo &quot;Home Dir. = &apos;$home&apos;&quot;</span><br><span class=\"line\">    echo &quot;Shell = &apos;$shell&apos;&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;No such user &apos;$user_name&apos;&quot; &gt;&amp;2</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></p>\n<p>上例中读入一个用户名，在/etc/passwd中找到这个用户的记录，并输出各字段的值。首先是通过grep命令得到指定用户的记录，并存入变量file_info中。重点观察下面这条语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IFS=&quot;:&quot; read user pw uid gid name home shell &lt;&lt;&lt; &quot;$file_info&quot;</span><br></pre></td></tr></table></figure></p>\n<p>该语句中首先将IFS变量赋值为“:”，表示读入数据的分隔符为“:”，在同一行上用read命令从变量file_info读入各字段的值。这种在命令前面加上变量赋值的格式表示这个变量只对这条命令生效，命令执行结束后变量恢复原值。</p>\n<h4 id=\"综合实例-菜单驱动的程序\"><a href=\"#综合实例-菜单驱动的程序\" class=\"headerlink\" title=\"综合实例 - 菜单驱动的程序\"></a>综合实例 - 菜单驱动的程序</h4><p>这个示例先显示一个菜单，然后用户选择一个菜单项后执行相应的功能，具体代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># read-menu: a menu driven system information program</span><br><span class=\"line\">clear</span><br><span class=\"line\">echo &quot;</span><br><span class=\"line\">Please Select:</span><br><span class=\"line\">    1. Display System Information</span><br><span class=\"line\">    2. Display Disk Space</span><br><span class=\"line\">    3. Display Home Space Utilization</span><br><span class=\"line\">    0. Quit</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">read -p &quot;Enter selection [0-3] &gt; &quot;          # -p选项后面的参数是提示字符串</span><br><span class=\"line\">if [[ $REPLY =~ ^[0-3]$ ]]; then            # read命令中不带变量则读入的数据放入变量$REPLY中</span><br><span class=\"line\">    if [[ $REPLY == 0 ]]; then</span><br><span class=\"line\">        echo &quot;Program terminated.&quot;</span><br><span class=\"line\">        exit </span><br><span class=\"line\">    fi</span><br><span class=\"line\">    if [[ $REPLY == 1 ]]; then</span><br><span class=\"line\">        echo &quot;Hostname: $HOSTNAME&quot;</span><br><span class=\"line\">        uptime                              # uptime命令显示系统运行时间</span><br><span class=\"line\">        exit</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    if [[ $REPLY == 2 ]]; then</span><br><span class=\"line\">        df -h                               # df命令现实系统空余磁盘空间</span><br><span class=\"line\">        exit x</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    if [[ $REPLY == 3 ]]; then</span><br><span class=\"line\">        if [[ $(id -u) -eq 0 ]]; then       # 用户id为0表示root用户</span><br><span class=\"line\">            echo &quot;Home Space Utilization (All Users)&quot;</span><br><span class=\"line\">            du -sh /home/*                  # 显示所有用户的磁盘空间使用情况</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo &quot;Home Space Utilization ($USER)&quot;</span><br><span class=\"line\">            du -sh $HOME                    # 显示当前用户的磁盘空间使用情况</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        exit </span><br><span class=\"line\">    fi</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;Invalid entry.&quot; &gt;&amp;2</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"while、until循环\"><a href=\"#while、until循环\" class=\"headerlink\" title=\"while、until循环\"></a>while、until循环</h1><h4 id=\"while-until循环的基本格式\"><a href=\"#while-until循环的基本格式\" class=\"headerlink\" title=\"while/until循环的基本格式\"></a>while/until循环的基本格式</h4><p>shell有两种循环流程控制形式：即while循环和until循环。</p>\n<p>while循环的基本格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while commands; do</span><br><span class=\"line\"></span><br><span class=\"line\">commands;</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">until循环的基本格式如下：</span><br><span class=\"line\"></span><br><span class=\"line\">until commands; do</span><br><span class=\"line\"></span><br><span class=\"line\">commands;</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<p>while循环和until循环的基本结构是一样的，唯一的区别在于用于结束循环的commands的退出状态不一样：</p>\n<p>当commands的退出状态为假（非零）时，退出while循环。<br>当commands的退出状态为真（零）时，退出until循环。<br>下面的两个程序执行的结果的是一样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># while-count: display a series of numbers</span><br><span class=\"line\">count=1</span><br><span class=\"line\">while [ $count -le 5 ]; do</span><br><span class=\"line\">    echo $count</span><br><span class=\"line\">        count=$((count + 1))</span><br><span class=\"line\">done</span><br><span class=\"line\">echo &quot;Finished.&quot;</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># until-count: display a series of numbers</span><br><span class=\"line\">count=1</span><br><span class=\"line\">until [ $count -gt 5 ]; do</span><br><span class=\"line\">    echo $count</span><br><span class=\"line\">        count=$((count + 1))</span><br><span class=\"line\">done</span><br><span class=\"line\">echo &quot;Finished.&quot;</span><br><span class=\"line\">和C、Java等程序设计语言一样，在while/until循环中还可以使用break和continue命令：</span><br><span class=\"line\"></span><br><span class=\"line\">break：中止并跳出循环结构。</span><br><span class=\"line\">continue：中止本次循环的后续代码执行，进入下一次循环。</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用循环读取文件\"><a href=\"#使用循环读取文件\" class=\"headerlink\" title=\"使用循环读取文件\"></a>使用循环读取文件</h4><p>while和until可以用于循环读取文件，可以通过标准输入重定向的方式利用while/until来读取文件的内容，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">wj@wj-VirtualBox:~$ cat score</span><br><span class=\"line\">Zhangsan    OS          85</span><br><span class=\"line\">Zhangsan    DB          90</span><br><span class=\"line\">Zhangsan    DS          88</span><br><span class=\"line\">Lisi        OS          77</span><br><span class=\"line\">Lisi        DB          80</span><br><span class=\"line\">Wangwu      DB          92</span><br><span class=\"line\">Wangwu      DS          84</span><br><span class=\"line\">wj@wj-VirtualBox:~$ cat readfile.sh</span><br><span class=\"line\"> \\#! /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">while read student course score; do</span><br><span class=\"line\">    printf &quot;%-20s%-10s%-10s\\n&quot; $student $course $score</span><br><span class=\"line\">done &lt; score</span><br><span class=\"line\">wj@wj-VirtualBox:~$ bash readfile.sh</span><br><span class=\"line\">Zhangsan            OS        85        </span><br><span class=\"line\">Zhangsan            DB        90        </span><br><span class=\"line\">Zhangsan            DS        88        </span><br><span class=\"line\">Lisi                OS        77        </span><br><span class=\"line\">Lisi                DB        80        </span><br><span class=\"line\">Wangwu              DB        92        </span><br><span class=\"line\">Wangwu              DS        84</span><br></pre></td></tr></table></figure></p>\n<p>在上例中，将score文件重定向到while循环，每次循环用read命令读取一行，当读到文件末，read命令的退出状态为非零值，此时就退出循环。在循环内利用printf命令格式输出读入数据的内容，printf命令的用法和C语言中printf函数的用法类似。</p>\n<h1 id=\"case分支\"><a href=\"#case分支\" class=\"headerlink\" title=\"case分支\"></a>case分支</h1><h4 id=\"case分支的基本结构\"><a href=\"#case分支的基本结构\" class=\"headerlink\" title=\"case分支的基本结构\"></a>case分支的基本结构</h4><p>case分支的基本结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case word in</span><br><span class=\"line\"></span><br><span class=\"line\">[pattern [| pattern]...) commands ;;]...</span><br><span class=\"line\"></span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n<p>注意用“;;”来结束每一个分支代码的执行。</p>\n<p>以下是前面章节中菜单驱动程序的case版本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># case-menu: a menu driven system information program</span><br><span class=\"line\">clear</span><br><span class=\"line\">echo &quot;</span><br><span class=\"line\">Please Select:</span><br><span class=\"line\">    1. Display System Information</span><br><span class=\"line\">    2. Display Disk Space</span><br><span class=\"line\">    3. Display Home Space Utilization</span><br><span class=\"line\">    0. Quit</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">read -p &quot;Enter selection [0-3] &gt; &quot;          </span><br><span class=\"line\">case $REPLY in</span><br><span class=\"line\">    0)  echo &quot;Program terminated.&quot;</span><br><span class=\"line\">        exit </span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    1)  echo &quot;Hostname: $HOSTNAME&quot;</span><br><span class=\"line\">        uptime                             </span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    2)  df -h                               </span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    3)  if [[ $(id -u) -eq 0 ]]; then      </span><br><span class=\"line\">            echo &quot;Home Space Utilization (All Users)&quot;</span><br><span class=\"line\">            du -sh /home/*                  </span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo &quot;Home Space Utilization ($USER)&quot;</span><br><span class=\"line\">            du -sh $HOME                    </span><br><span class=\"line\">        fi</span><br><span class=\"line\">        ;; </span><br><span class=\"line\">    *) echo &quot;Invalid entry&quot; &gt;&amp;2</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"匹配模式\"><a href=\"#匹配模式\" class=\"headerlink\" title=\"匹配模式\"></a>匹配模式</h4><p>case分支结构的每一个分支都是一个模式匹配过程，这个模式是一个以“)”结束的字符串，其中可以带shell的通配符，比如：???.txt、[[:upper:]]*等等。</p>\n<h4 id=\"匹配多个条件\"><a href=\"#匹配多个条件\" class=\"headerlink\" title=\"匹配多个条件\"></a>匹配多个条件</h4><p>case分支中的代码通常是以“;;”结束，除此之外，还可以使用另一个结束符“;;&amp;”，这个结束符表示这个分支代码运行结束后，继续去匹配其它分支。如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ cat m-case.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># m-case: test a character</span><br><span class=\"line\">read -n 1 -p &quot;Type a character &gt; &quot;</span><br><span class=\"line\">echo</span><br><span class=\"line\">case $REPLY in</span><br><span class=\"line\">    [[:upper:]])    echo &quot;&apos;$REPLY&apos; is upper case.&quot; ;;&amp;</span><br><span class=\"line\">    [[:lower:]])    echo &quot;&apos;$REPLY&apos; is lower case.&quot; ;;&amp;</span><br><span class=\"line\">    [[:alpha:]])    echo &quot;&apos;$REPLY&apos; is alphabetic.&quot; ;;&amp;</span><br><span class=\"line\">    [[:digit:]])    echo &quot;&apos;$REPLY&apos; is a digit.&quot; ;;&amp;</span><br><span class=\"line\">    [[:graph:]])    echo &quot;&apos;$REPLY&apos; is a visible character.&quot; ;;&amp;</span><br><span class=\"line\">    [[:punct:]])    echo &quot;&apos;$REPLY&apos; is a punctuation symbol.&quot; ;;&amp;</span><br><span class=\"line\">    [[:space:]])    echo &quot;&apos;$REPLY&apos; is a whitespace character.&quot; ;;&amp;</span><br><span class=\"line\">    [[:xdigit:]])   echo &quot;&apos;$REPLY&apos; is a hexadecimal digit.&quot; ;;&amp;</span><br><span class=\"line\">esac</span><br><span class=\"line\">wj@wj-VirtualBox:~$ bash m-case.sh</span><br><span class=\"line\">Type a character &gt; a</span><br><span class=\"line\">&apos;a&apos; is lower case.</span><br><span class=\"line\">&apos;a&apos; is alphabetic.</span><br><span class=\"line\">&apos;a&apos; is a visible character.</span><br><span class=\"line\">&apos;a&apos; is a hexadecimal digit.</span><br></pre></td></tr></table></figure></p>\n<p>从上例中可以看到，当输入“a”时，匹配了4个分支的测试条件。</p>\n<h1 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h1><h4 id=\"for循环的基本格式\"><a href=\"#for循环的基本格式\" class=\"headerlink\" title=\"for循环的基本格式\"></a>for循环的基本格式</h4><p>for循环的基本格式是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for variable [in words]; do</span><br><span class=\"line\"></span><br><span class=\"line\">commands</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">例如：</span><br><span class=\"line\"></span><br><span class=\"line\">wj@wj-VirtualBox:~$ for i in A B C D; do echo $i; done</span><br><span class=\"line\">A</span><br><span class=\"line\">B</span><br><span class=\"line\">C</span><br><span class=\"line\">D</span><br></pre></td></tr></table></figure></p>\n<p>或者：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ for i in &#123;A..D&#125;; do echo $i; done</span><br><span class=\"line\">A</span><br><span class=\"line\">B</span><br><span class=\"line\">C</span><br><span class=\"line\">D</span><br></pre></td></tr></table></figure></p>\n<p>也可以带上通配符，对一系列文件名进行列表，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ for i in /bin/*zip; do echo $i; done</span><br><span class=\"line\">/bin/gunzip</span><br><span class=\"line\">/bin/gzip</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"C语言格式的for循环\"><a href=\"#C语言格式的for循环\" class=\"headerlink\" title=\"C语言格式的for循环\"></a>C语言格式的for循环</h4><p>我们还可以采用C语言格式的for循环，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ cat f.sh</span><br><span class=\"line\">#! /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">for ((i=0; i&lt;3; i++)); do</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">done</span><br><span class=\"line\">wj@wj-VirtualBox:~$ bash f.sh</span><br><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h1><h4 id=\"位置参数\"><a href=\"#位置参数\" class=\"headerlink\" title=\"位置参数\"></a>位置参数</h4><p>位置参数也叫命令行参数，执行一个命令时在命令行上用空格分隔开来的每一个字符串就是一个位置参数。</p>\n<p>在shell程序中可以通过“$#”得到位置参数的个数（不包含命令本身），通过“$n”（n在0~9之间）或“${n}”（n大于9）可以得到每一个命令行参数，其中“$0”是命令本身。</p>\n<p>下面是显示所有位置参数的示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre style=&quot;padding: 9.5px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 13px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 10px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.15);&quot;&gt;wj@wj-VirtualBox:~$ cat listargs.sh</span><br><span class=\"line\">#! /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">echo $#</span><br><span class=\"line\">echo $0</span><br><span class=\"line\">echo $1</span><br><span class=\"line\">echo $2</span><br><span class=\"line\">echo $3</span><br><span class=\"line\">echo $4</span><br><span class=\"line\">echo $5</span><br><span class=\"line\">echo $6</span><br><span class=\"line\">echo $7</span><br><span class=\"line\">echo $8</span><br><span class=\"line\">echo $9</span><br><span class=\"line\">echo $&#123;10&#125;</span><br><span class=\"line\">echo $&#123;11&#125;</span><br><span class=\"line\">wj@wj-VirtualBox:~$ chmod +x listargs.sh</span><br><span class=\"line\">wj@wj-VirtualBox:~$ ./listargs.sh a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11</span><br><span class=\"line\">9</span><br><span class=\"line\">./listargs.sh</span><br><span class=\"line\">a1</span><br><span class=\"line\">a2</span><br><span class=\"line\">a3</span><br><span class=\"line\">a4</span><br><span class=\"line\">a5</span><br><span class=\"line\">a6</span><br><span class=\"line\">a7</span><br><span class=\"line\">a8</span><br><span class=\"line\">a9</span><br><span class=\"line\">a10</span><br><span class=\"line\">a11 &lt;/pre&gt;</span><br></pre></td></tr></table></figure></p>\n<p>用for循环可以得到每个位置参数，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre style=&quot;padding: 9.5px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 13px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 10px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.15);&quot;&gt;wj@wj-VirtualBox:~$ cat forargs.sh</span><br><span class=\"line\">#! /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">for i; do</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">done</span><br><span class=\"line\">wj@wj-VirtualBox:~$ bash forargs.sh a1 a2 a3</span><br><span class=\"line\">a1</span><br><span class=\"line\">a2</span><br><span class=\"line\">a3&lt;/pre&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"通过shift命令获取每一个参数\"><a href=\"#通过shift命令获取每一个参数\" class=\"headerlink\" title=\"通过shift命令获取每一个参数\"></a>通过shift命令获取每一个参数</h3><p>shift是一个特殊的命令，当在shell程序里执行时，位置参数会下移一个，也就是$2变为$1、$3变为$2、…..，以此类推，同时$#减1。因此利用shift命令可以得到所有位置参数，示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre style=&quot;padding: 9.5px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 13px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 10px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.15);&quot;&gt;wj@wj-VirtualBox:~$ cat shiftargs.sh</span><br><span class=\"line\">#! /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">count=1</span><br><span class=\"line\">while [ $# -gt 0 ]; do</span><br><span class=\"line\">    echo &quot;Argument $count: $1&quot;</span><br><span class=\"line\">    count=$((count+1))</span><br><span class=\"line\">    shift</span><br><span class=\"line\">done;</span><br><span class=\"line\">wj@wj-VirtualBox:~$ bash shiftargs.sh a1 a2 a3 a4 a5 a6</span><br><span class=\"line\">Argument 1: a1</span><br><span class=\"line\">Argument 2: a2</span><br><span class=\"line\">Argument 3: a3</span><br><span class=\"line\">Argument 4: a4</span><br><span class=\"line\">Argument 5: a5</span><br><span class=\"line\">Argument 6: a6</span><br><span class=\"line\">&lt;/pre&gt;</span><br></pre></td></tr></table></figure></p>\n<p>上面的例子中，第一次循环$1就是命令行上的第1个参数，第二次循环因为执行了shift命令，$1就变成了原来的第2个参数，依此下去就取得了每一个命令行参数。我们还可以用另一种循环控制方式，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre style=&quot;padding: 9.5px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 13px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 10px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.15);&quot;&gt;wj@wj-VirtualBox:~$ cat shiftargs1.sh</span><br><span class=\"line\">#! /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">count=1</span><br><span class=\"line\">while [ -n &quot;$1&quot; ]; do</span><br><span class=\"line\">    echo &quot;Argument $count: $1&quot;</span><br><span class=\"line\">    count=$((count+1))</span><br><span class=\"line\">    shift</span><br><span class=\"line\">done;&lt;/pre&gt;</span><br></pre></td></tr></table></figure></p>\n<p>上例采用判断$1是否为空来决定是否结束循环，这个条件不能写成“while [-n $1]; do”，$1必须加上引号，因为如果$1为空时，不加引号的控制条件会变成“while [-n ]; do”，会产生错误，加上引号，就变成“while [ -n “” ]; do”，程序正确执行。另一种做法是将方括号改变成双方括号，如“while [[ -n $1 ]]; do”，这样也可以正确运行。</p>\n<h4 id=\"所有参数的列表\"><a href=\"#所有参数的列表\" class=\"headerlink\" title=\"所有参数的列表\"></a>所有参数的列表</h4><p>shell中可以用“$*”和“$@”来得到所有参数的列表，如果这两个符号不带双引号，效果是一样的，带上双引号，会有些不同：</p>\n<ul>\n<li>$* 和 $a：展开成一个从1开始的位置参数列表。</li>\n<li><p>“$*”：</p>\n<p>展开成一个由双引号引起来的字符串，包含了 所有的位置参数，每个位置参数由 shell <a href=\"http://wj.zust.edu.cn/moodle/mod/page/view.php?id=78\" title=\"变量\" target=\"_blank\" rel=\"noopener\">变量</a> IFS 的第一个字符(默认为一个空格)分隔开。</p>\n</li>\n<li><p>“$@”：把每一个位置参数展开成一个由双引号引起来的分开的字符串。</p>\n</li>\n</ul>\n<p>示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre style=&quot;padding: 9.5px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 13px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 10px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.15);&quot;&gt;j@wj-VirtualBox:~$ cat listallargs.sh</span><br><span class=\"line\">#! /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">echo &apos;-- $*:&apos;</span><br><span class=\"line\">for a in $*; do</span><br><span class=\"line\">    echo $a</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &apos;-- $@:&apos;</span><br><span class=\"line\">for a in $@; do</span><br><span class=\"line\">    echo $a</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &apos;-- &quot;$*&quot;:&apos;</span><br><span class=\"line\">for a in &quot;$*&quot;; do</span><br><span class=\"line\">    echo $a</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &apos;-- &quot;$@&quot;:&apos;</span><br><span class=\"line\">for a in &quot;$@&quot;; do</span><br><span class=\"line\">    echo $a</span><br><span class=\"line\">done</span><br><span class=\"line\">wj@wj-VirtualBox:~$ bash listallargs.sh a1 a2 a3</span><br><span class=\"line\">-- $*:</span><br><span class=\"line\">a1</span><br><span class=\"line\">a2</span><br><span class=\"line\">a3</span><br><span class=\"line\">-- $@:</span><br><span class=\"line\">a1</span><br><span class=\"line\">a2</span><br><span class=\"line\">a3</span><br><span class=\"line\">-- &quot;$*&quot;:</span><br><span class=\"line\">a1 a2 a3</span><br><span class=\"line\">-- &quot;$@&quot;:</span><br><span class=\"line\">a1</span><br><span class=\"line\">a2</span><br><span class=\"line\">a3</span><br><span class=\"line\">wj@wj-VirtualBox:~$ bash listallargs.sh &quot;hello&quot; &quot;hello world&quot;</span><br><span class=\"line\">-- $*:</span><br><span class=\"line\">hello</span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">-- $@:</span><br><span class=\"line\">hello</span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">-- &quot;$*&quot;:</span><br><span class=\"line\">hello hello world</span><br><span class=\"line\">-- &quot;$@&quot;:</span><br><span class=\"line\">hello</span><br><span class=\"line\">hello world&lt;/pre&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"综合示例\"><a href=\"#综合示例\" class=\"headerlink\" title=\"综合示例\"></a>综合示例</h4><p>本例来自《快乐的Linux命令行》，这是一个综合性的程序，可以对命令行参数做一些处理。对程序中bug做了一些修订，修订后的代码<a href=\"http://gofile.me/3axmB/AmYerpSq9\" target=\"_blank\" rel=\"noopener\">点此下载</a>。</p>\n<p>修订处说明如下：</p>\n<p>1. 程序中Here Document的结束符“<em>EOF</em>”作顶格处理，一般来说结束符应顶格（不能缩进，否则把前面的空格也当作结束符），如不顶格，前面只能是tab字符，不能是空格（在书籍上看不出是tab还是空格）。</p>\n<p>2. 程序中交互式输出文件的代码加上else节，否则程序运行不正常，即代码改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre style=&quot;padding: 9.5px; font-family: Monaco, Menlo, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 13px; color: rgb(51, 51, 51); border-radius: 4px; display: block; margin: 0px 0px 10px; line-height: 20px; word-break: break-all; word-wrap: break-word; white-space: pre-wrap; background-color: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.15);&quot;&gt;if [[ -n $interactive ]]; then</span><br><span class=\"line\">    while true; do</span><br><span class=\"line\">        read -p &quot;Enter name of output file: &quot; filename</span><br><span class=\"line\">        if [[ -e $filename ]]; then</span><br><span class=\"line\">            read -p &quot;&apos;$filename&apos; exists. Overwrite? [y/n/q] &gt; &quot;</span><br><span class=\"line\">            case $REPLY in</span><br><span class=\"line\">                Y|y)    break</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                Q|q)    echo &quot;Program terminated.&quot;</span><br><span class=\"line\">                        exit</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                *)      continue</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\">        else</span><br><span class=\"line\">            break</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    done</span><br><span class=\"line\">fi&lt;/pre&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><h4 id=\"数组的定义\"><a href=\"#数组的定义\" class=\"headerlink\" title=\"数组的定义\"></a>数组的定义</h4><p>前面不加声明，给数组元素赋值，就直接产生了数组。如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ a[0]=A </span><br><span class=\"line\">wj@wj-VirtualBox:~$ a[1]=B</span><br><span class=\"line\">wj@wj-VirtualBox:~$ a[2]=C</span><br><span class=\"line\">wj@wj-VirtualBox:~$ for ((i=0;i&lt;3;i++)); do echo $&#123;a[i]&#125;; done</span><br><span class=\"line\">A</span><br><span class=\"line\">B</span><br><span class=\"line\">C</span><br></pre></td></tr></table></figure></p>\n<p>也可以用下面的方式建立数组并给每个元素赋值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ days=(Sun Mon Tue Wed Thu Fri Sat)</span><br><span class=\"line\">wj@wj-VirtualBox:~$ for ((i=0;i&lt;7;i++)); do echo $&#123;days[i]&#125;; done</span><br><span class=\"line\">Sun</span><br><span class=\"line\">Mon</span><br><span class=\"line\">Tue</span><br><span class=\"line\">Wed</span><br><span class=\"line\">Thu</span><br><span class=\"line\">Fri</span><br><span class=\"line\">Sat</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"访问数组中的每一个元素\"><a href=\"#访问数组中的每一个元素\" class=\"headerlink\" title=\"访问数组中的每一个元素\"></a>访问数组中的每一个元素</h4><p>下标 <em> 和 @ 可以被用来访问数组中的每一个元素。</em>和@的区别和位置参数中是一样的，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ animals=(&quot;a dog&quot; &quot;a cat&quot; &quot;a fish&quot;)</span><br><span class=\"line\">wj@wj-VirtualBox:~$ for i in $&#123;animals[*]&#125;; do echo $i; done</span><br><span class=\"line\">a</span><br><span class=\"line\">dog</span><br><span class=\"line\">a</span><br><span class=\"line\">cat</span><br><span class=\"line\">a</span><br><span class=\"line\">fish</span><br><span class=\"line\">wj@wj-VirtualBox:~$ for i in $&#123;animals[@]&#125;; do echo $i; done</span><br><span class=\"line\">a</span><br><span class=\"line\">dog</span><br><span class=\"line\">a</span><br><span class=\"line\">cat</span><br><span class=\"line\">a</span><br><span class=\"line\">fish</span><br><span class=\"line\">wj@wj-VirtualBox:~$ for i in &quot;$&#123;animals[*]&#125;&quot;; do echo $i; done</span><br><span class=\"line\">a dog a cat a fish</span><br><span class=\"line\">wj@wj-VirtualBox:~$ for i in &quot;$&#123;animals[@]&#125;&quot;; do echo $i; done</span><br><span class=\"line\">a dog</span><br><span class=\"line\">a cat</span><br><span class=\"line\">a fish</span><br></pre></td></tr></table></figure></p>\n<p>上例中，访问数据元素加双引号和不加双引号是不一样的。</p>\n<p>通过下例的方式可以得到每个元素的下标：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ foo=([2]=a [4]=b [6]=c)</span><br><span class=\"line\">wj@</span><br><span class=\"line\">4</span><br><span class=\"line\">6</span><br><span class=\"line\">wj@</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"计算数组元素的个数\"><a href=\"#计算数组元素的个数\" class=\"headerlink\" title=\"计算数组元素的个数\"></a>计算数组元素的个数</h4><p>可以下例方法来计算一个数组的元素个数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ animals=(&quot;a dog&quot; &quot;a cat&quot; &quot;a fish&quot;)</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $&#123;#animals[@]&#125;</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<p>数组的下标实际上是一个索引值，这个索引值可以不连续的，因此数组元素的个数实际上是有索引的元素的个数，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ a=([2]=A [5]=B [8]=C)</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $&#123;#a[@]&#125;</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<p>上例中用带下标的方法给数组元素赋值，即a[2]为A，a[5]为B，a[8]为C，这个数组中只有三个元素，a[0]、a[1]等等元素是不存在的。所以计算出数组的长度为3。</p>\n<h4 id=\"向数组内添加元素\"><a href=\"#向数组内添加元素\" class=\"headerlink\" title=\"向数组内添加元素\"></a>向数组内添加元素</h4><p>利用“+=”运算符可以向一个已经存在的数组后面添加元素，如下例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ foo=([2]=a [4]=b [6]=c)</span><br><span class=\"line\">wj@wj-VirtualBox:~$ for i in &quot;$&#123;!foo[@]&#125;&quot;; do echo $i; done</span><br><span class=\"line\">2</span><br><span class=\"line\">4</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"对数组内的元素进行排序\"><a href=\"#对数组内的元素进行排序\" class=\"headerlink\" title=\"对数组内的元素进行排序\"></a>对数组内的元素进行排序</h4><p>shell本身没有对数组内元素进行排序的功能，但可以通过下例的程序来实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wj@wj-VirtualBox:~$ a=(f a e d b c)</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $&#123;a[@]&#125;</span><br><span class=\"line\">f a e d b c</span><br><span class=\"line\">wj@wj-VirtualBox:~$ a_sorted=($(for i in &quot;$&#123;a[@]&#125;&quot;; do echo $i; done | sort))</span><br><span class=\"line\">wj@wj-VirtualBox:~$ echo $&#123;a_sorted[@]&#125;</span><br><span class=\"line\">a b c d e f</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/11634944-8819b1ec6bde1fe6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/600\" alt=\"这是一张图\"></p>\n","categories":[{"name":"SHELL程序设计","slug":"SHELL程序设计","count":1,"path":"api/categories/SHELL程序设计.json"}],"tags":[{"name":"SHELL程序设计","slug":"SHELL程序设计","count":1,"path":"api/tags/SHELL程序设计.json"}]}