{"title":"mybatis框架入门学习1","slug":"mybatis框架入门学习 (2)","date":"2020-12-07T12:03:15.000Z","updated":"2020-12-07T12:06:14.894Z","comments":true,"path":"api/articles/mybatis框架入门学习 (2).json","photos":[],"link":"","excerpt":"第1章 框架概述1.1 什么是框架1.1.1 什么是框架框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种<br>定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。<br>简而言之，框架其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别<br>人搭好的舞台，你来做表演。而且，框架一般是成熟的，不断升级的软件。","covers":["https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/2537a91e33246ae08ced90d2243ce7df.jpg"],"content":"<hr>\n<h2 id=\"第1章-框架概述\"><a href=\"#第1章-框架概述\" class=\"headerlink\" title=\"第1章 框架概述\"></a>第1章 框架概述</h2><h3 id=\"1-1-什么是框架\"><a href=\"#1-1-什么是框架\" class=\"headerlink\" title=\"1.1 什么是框架\"></a>1.1 什么是框架</h3><h4 id=\"1-1-1-什么是框架\"><a href=\"#1-1-1-什么是框架\" class=\"headerlink\" title=\"1.1.1 什么是框架\"></a>1.1.1 什么是框架</h4><p>框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种<br>定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。<br>简而言之，框架其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别<br>人搭好的舞台，你来做表演。而且，框架一般是成熟的，不断升级的软件。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"1-1-2-框架要解决的问题\"><a href=\"#1-1-2-框架要解决的问题\" class=\"headerlink\" title=\"1.1.2 框架要解决的问题\"></a>1.1.2 框架要解决的问题</h4><p>框架要解决的最重要的一个问题是技术整合的问题，在 J2EE 的 框架中，有着各种各样的技术，不同的<br>软件企业需要从 J2EE 中选择不同的技术，这就使得软件企业最终的应用依赖于这些技术，技术自身的复杂性和技<br>术的风险性将会直接对应用造成冲击。而应用是软件企业的核心，是竞争力的关键所在，因此应该将应用自身的设<br>计和具体的实现技术解耦。这样，软件企业的研发将集中在应用的设计上，而不是具体的技术实现，技术实现是应<br>用的底层支撑，它不应该直接对应用产生影响。<br>框架一般处在低层应用平台（如 J2EE）和高层业务逻辑之间的中间层。</p>\n<img src=\"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/2537a91e33246ae08ced90d2243ce7df.jpg\" alt=\"短发女子和穿高跟鞋女子好看二次元动漫壁纸\" style=\"zoom:67%;\" />\n\n<h4 id=\"1-1-3-软件开发的分层重要性\"><a href=\"#1-1-3-软件开发的分层重要性\" class=\"headerlink\" title=\"1.1.3 软件开发的分层重要性\"></a>1.1.3 软件开发的分层重要性</h4><p>框架的重要性在于它实现了部分功能，并且能够很好的将低层应用平台和高层业务逻辑进行了缓和。为了实现<br>软件工程中的“高内聚、低耦合”。把问题划分开来各个解决，易于控制，易于延展，易于分配资源。 我们常见的<br>MVC 软件设计思想就是很好的分层思想。</p>\n<p>通过分层更好的实现了各个部分的职责，在每一层将再细化出不同的框架，分别解决各层关注的问题。</p>\n<h4 id=\"1-1-4-分层开发下的常见框架\"><a href=\"#1-1-4-分层开发下的常见框架\" class=\"headerlink\" title=\"1.1.4 分层开发下的常见框架\"></a>1.1.4 分层开发下的常见框架</h4><p>常见的 JavaEE 开发框架：</p>\n<h5 id=\"1、-解决数据的持久化问题的框架\"><a href=\"#1、-解决数据的持久化问题的框架\" class=\"headerlink\" title=\"1、 解决数据的持久化问题的框架\"></a>1、 解决数据的持久化问题的框架</h5><p>作为持久层的框架，还有一个封装程度更高的框架就是Hibernate，但这个框架因为各种原因目前在国内的<br>流行程度下降太多，现在公司开发也越来越少使用。 目前使用 Spring Data 来实现数据持久化也是一种趋势。</p>\n<h5 id=\"2、-解决-WEB-层问题的-MVC-框架\"><a href=\"#2、-解决-WEB-层问题的-MVC-框架\" class=\"headerlink\" title=\"2、 解决 WEB 层问题的 MVC 框架\"></a>2、 解决 WEB 层问题的 MVC 框架</h5><h5 id=\"3、解决技术整合问题的框架\"><a href=\"#3、解决技术整合问题的框架\" class=\"headerlink\" title=\"3、解决技术整合问题的框架\"></a>3、解决技术整合问题的框架</h5><h4 id=\"1-1-5-MyBatis-框架概述\"><a href=\"#1-1-5-MyBatis-框架概述\" class=\"headerlink\" title=\"1.1.5 MyBatis 框架概述\"></a>1.1.5 MyBatis 框架概述</h4><p>mybatis 是一个优秀的基于 java 的持久层框架，它内部封装了 jdbc，使开发者只需要关注 sql 语句本身，<br>而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。<br>mybatis 通过 xml 或注解的方式将要执行的各种 statement 配置起来，并通过 java 对象和 statement 中<br>sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java 对象并<br>返回。<br>采用 ORM 思想解决了实体和数据库映射的问题，对 jdbc 进行了封装，屏蔽了 jdbc api 底层访问细节，使我<br>们不用与 jdbc api 打交道，就可以完成对数据库的持久化操作。<br>为了我们能够更好掌握框架运行的内部过程，并且有更好的体验，下面我们将从自定义 Mybatis 框架开始来<br>学习框架。此时我们将会体验框架从无到有的过程体验，也能够很好的综合前面阶段所学的基础。</p>\n<h3 id=\"1-2-JDBC-编程的分析\"><a href=\"#1-2-JDBC-编程的分析\" class=\"headerlink\" title=\"1.2 JDBC 编程的分析\"></a>1.2 JDBC 编程的分析</h3><h4 id=\"1-2-1-jdbc-程序的回顾\"><a href=\"#1-2-1-jdbc-程序的回顾\" class=\"headerlink\" title=\"1.2.1 jdbc 程序的回顾\"></a>1.2.1 jdbc 程序的回顾</h4><p>public static void main(String[] args) {<br>Connection connection = null;<br>PreparedStatement preparedStatement = null;<br>ResultSet resultSet = null;<br>try {<br>//加载数据库驱动<br>Class.forName(“com.mysql.jdbc.Driver”);<br>//通过驱动管理类获取数据库链接<br>connection = DriverManager<br>.getConnection(“jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8”,”ro<br>ot”, “root”);<br>//定义 sql 语句 ?表示占位符<br>String sql = “select * from user where username = ?”;</p>\n<p>//获取预处理 statement<br>preparedStatement = connection.prepareStatement(sql);<br>//设置参数，第一个参数为 sql 语句中参数的序号（从 1 开始），第二个参数为设置的<br>参数值<br>preparedStatement.setString(1, “王五”);<br>//向数据库发出 sql 执行查询，查询出结果集<br>resultSet = preparedStatement.executeQuery();<br>//遍历查询结果集<br>while(resultSet.next()){<br>System.out.println(resultSet.getString(“id”)+”<br>“+resultSet.getString(“username”));<br>}<br>} catch (Exception e) {<br>e.printStackTrace();<br>}finally{<br>//释放资源<br>if(resultSet!=null){<br>try {<br>resultSet.close();<br>} catch (SQLException e) {<br>e.printStackTrace();<br>}<br>}<br>if(preparedStatement!=null){<br>try {<br>preparedStatement.close();<br>} catch (SQLException e) {<br>e.printStackTrace();<br>}<br>}<br>if(connection!=null){<br>try {<br>connection.close();<br>} catch (SQLException e) {<br>// TODO Auto-generated catch block<br>e.printStackTrace();<br>}<br>}<br>}<br>}<br>上边使用 jdbc 的原始方法（未经封装）实现了查询数据库表记录的操作。</p>\n<h4 id=\"1-2-2-jdbc-问题分析\"><a href=\"#1-2-2-jdbc-问题分析\" class=\"headerlink\" title=\"1.2.2 jdbc 问题分析\"></a>1.2.2 jdbc 问题分析</h4><p>1、 数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。<br>2、 Sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大， sql 变动需要改变 java<br>代码。<br>3、 使用 preparedStatement 向占有位符号传参数存在硬编码，因为 sql 语句的 where 条件不一定，可能<br>多也可能少，修改 sql 还要修改代码，系统不易维护。<br>4、 对结果集解析存在硬编码（查询列名）， sql 变化导致解析代码变化，系统不易维护，如果能将数据库记<br>录封装成 pojo 对象解析比较方便。</p>\n<h2 id=\"第2章-Mybatis-框架快速入门\"><a href=\"#第2章-Mybatis-框架快速入门\" class=\"headerlink\" title=\"第2章 Mybatis 框架快速入门\"></a>第2章 Mybatis 框架快速入门</h2><p>通过前面的学习，我们已经能够使用所学的基础知识构建自定义的 Mybatis 框架了。这个过程是基本功的考<br>验，我们已经强大了不少，但现实是残酷的，我们所定义的 Mybatis 框架和真正的 Mybatis 框架相比，还是显得<br>渺小。行业内所流行的 Mybatis 框架现在我们将开启学习。</p>\n<h3 id=\"2-1-Mybatis-框架开发的准备\"><a href=\"#2-1-Mybatis-框架开发的准备\" class=\"headerlink\" title=\"2.1 Mybatis 框架开发的准备\"></a>2.1 Mybatis 框架开发的准备</h3><h4 id=\"2-1-1-官网下载-Mybatis-框架\"><a href=\"#2-1-1-官网下载-Mybatis-框架\" class=\"headerlink\" title=\"2.1.1 官网下载 Mybatis 框架\"></a>2.1.1 官网下载 Mybatis 框架</h4><p>从百度中“mybatis download”可以下载最新的 Mybatis 开发包。<br>进入选择语言的界面，进入中文版本的开发文档。<br>我们可以看到熟悉的中文开发文档了。<br>下载相关的 jar 包或 maven 开发的坐标。<br>下载的 zip 文件如下（ 我们的资料文件夹）：<br>我们所使用的 Mybatis 版本是 3.4.5 版本。</p>\n<h3 id=\"2-2-搭建-Mybatis-开发环境\"><a href=\"#2-2-搭建-Mybatis-开发环境\" class=\"headerlink\" title=\"2.2 搭建 Mybatis 开发环境\"></a>2.2 搭建 Mybatis 开发环境</h3><h4 id=\"2-2-1-创建-maven-工程\"><a href=\"#2-2-1-创建-maven-工程\" class=\"headerlink\" title=\"2.2.1 创建 maven 工程\"></a>2.2.1 创建 maven 工程</h4><p>创建 mybatis01 的工程，工程信息如下：<br>Groupid:com.itheima<br>ArtifactId:mybatis01<br>Packing:jar</p>\n<h4 id=\"2-2-2-添加-Mybatis3-4-5-的坐标\"><a href=\"#2-2-2-添加-Mybatis3-4-5-的坐标\" class=\"headerlink\" title=\"2.2.2 添加 Mybatis3.4.5 的坐标\"></a>2.2.2 添加 Mybatis3.4.5 的坐标</h4><p>在 pom.xml 文件中添加 Mybatis3.4.5 的坐标，如下：<br><dependencies><br><dependency><br><groupId>org.mybatis</groupId><br><artifactId>mybatis</artifactId><br><version>3.4.5</version><br></dependency><br><dependency><br><groupId>junit</groupId><br><artifactId>junit</artifactId><br><version>4.10</version><br><scope>test</scope><br></dependency><br><dependency><br><groupId>mysql</groupId><br><artifactId>mysql-connector-java</artifactId><br><version>5.1.6</version><br><scope>runtime</scope><br></dependency><br><dependency><br><groupId>log4j</groupId><br><artifactId>log4j</artifactId><br><version>1.2.12</version><br></dependency><br></dependencies></p>\n<h4 id=\"2-2-3-编写-User-实体类\"><a href=\"#2-2-3-编写-User-实体类\" class=\"headerlink\" title=\"2.2.3 编写 User 实体类\"></a>2.2.3 编写 User 实体类</h4><p>/**<br>*<br>* <p>Title: User</p><br>* <p>Description: 用户的实体类</p><br>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br><em>/<br>public class User implements Serializable {<br>private Integer id;<br>private String username;<br>private Date birthday;<br>private String sex;<br>private String address;<br>public Integer getId() {<br>return id;<br>}<br>public void setId(Integer id) {<br>this.id = id;<br>}<br>public String getUsername() {<br>return username;<br>}<br>public void setUsername(String username) {<br>this.username = username;<br>}<br>public Date getBirthday() {<br>return birthday;<br>}<br>public void setBirthday(Date birthday) {<br>this.birthday = birthday;<br>}<br>public String getSex() {<br>return sex;<br>}<br>public void setSex(String sex) {<br>this.sex = sex;<br>}<br>public String getAddress() {<br>return address;<br>}<br>public void setAddress(String address) {<br>this.address = address;<br>}<br>@Override<br>public String toString() {<br>return “User [id=” + id + “, username=” + username + “, birthday=” + birthday<br>+ “, sex=” + sex + “, address=”<br>+ address + “]”;<br>}<br>}<br>2.2.4 编写持久层接口 IUserDao<br>IUserDao 接口就是我们的持久层接口（也可以写成 UserDao 或者 UserMapper） ,具体代码如下：<br>/**<br>*<br>* <p>Title: IUserDao</p><br>\\</em> <p>Description: 用户的持久层操作</p><br>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br><em>/<br>public interface IUserDao {<br>/**<br>\\</em> 查询所有用户<br>* @return<br>*/<br>List<User> findAll();<br>}<br>2.2.5 编写持久层接口的映射文件 IUserDao.xml<br>要求：<br>创建位置： 必须和持久层接口在相同的包中。<br>名称： 必须以持久层接口名称命名文件名，扩展名是.xml<br><?xml version=\"1.0\" encoding=\"UTF-8\"?></p>\n<!DOCTYPE mapper\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.itheima.dao.IUserDao\">\n<!-- 配置查询所有操作 -->\n<select id=\"findAll\" resultType=\"com.itheima.domain.User\">\nselect * from user\n</select>\n\n\n</mapper>\n\n<h4 id=\"2-2-6-编写-SqlMapConfig-xml-配置文件\"><a href=\"#2-2-6-编写-SqlMapConfig-xml-配置文件\" class=\"headerlink\" title=\"2.2.6 编写 SqlMapConfig.xml 配置文件\"></a>2.2.6 编写 SqlMapConfig.xml 配置文件</h4><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!DOCTYPE configuration\nPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n<!-- 配置 mybatis 的环境 -->\n<environments default=\"mysql\">\n<!-- 配置 mysql 的环境 -->\n<environment id=\"mysql\">\n<!-- 配置事务的类型 -->\n<transactionManager type=\"JDBC\"></transactionManager>\n<!-- 配置连接数据库的信息：用的是数据源(连接池) -->\n<dataSource type=\"POOLED\">\n<property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n<property name=\"url\" value=\"jdbc:mysql://localhost:3306/ee50\"/>\n<property name=\"username\" value=\"root\"/>\n<property name=\"password\" value=\"1234\"/>\n</dataSource>\n</environment>\n</environments>\n<!-- 告知 mybatis 映射配置的位置 -->\n<mappers>\n<mapper resource=\"com/itheima/dao/IUserDao.xml\"/>\n</mappers>\n</configuration>\n2.2.7 编写测试类\n/**\n*\n\\* <p>Title: MybatisTest</p>\n\\* <p>Description: 测试 mybatis 的环境</p>\n\\* <p>Company: http://www.itheima.com/ </p>\n*/\npublic class MybatisTest {\npublic static void main(String[] args)throws Exception {\n\n\n<p>//1.读取配置文件<br>InputStream in = Resources.getResourceAsStream(“SqlMapConfig.xml”);<br>//2.创建 SqlSessionFactory 的构建者对象<br>SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();<br>//3.使用构建者创建工厂对象 SqlSessionFactory<br>SqlSessionFactory factory = builder.build(in);<br>//4.使用 SqlSessionFactory 生产 SqlSession 对象<br>SqlSession session = factory.openSession();<br>//5.使用 SqlSession 创建 dao 接口的代理对象<br>IUserDao userDao = session.getMapper(IUserDao.class);<br>//6.使用代理对象执行查询所有方法<br>List<User> users = userDao.findAll();<br>for(User user : users) {<br>System.out.println(user);<br>}<br>//7.释放资源<br>session.close();<br>in.close();<br>}<br>}<br>2.3 小结<br>通过快速入门示例，我们发现使用 mybatis 是非常容易的一件事情，因为只需要编写 Dao 接口并且按照<br>mybatis 要求编写两个配置文件，就可以实现功能。远比我们之前的 jdbc 方便多了。（我们使用注解之后，将变得<br>更为简单，只需要编写一个 mybatis 配置文件就够了。）<br>但是，这里面包含了许多细节，比如为什么会有工厂对象（SqlSessionFactory） ,为什么有了工厂之后还<br>要有构建者对象（SqlSessionFactoryBuilder），为什么 IUserDao.xml 在创建时有位置和文件名的要求等等。<br>这些问题我们在自定义 mybatis 框架的章节，通过层层剥离的方式，给大家讲解。<br>请注意： 我们讲解自定义 Mybatis 框架，不是让大家回去自己去写个 mybatis，而是让我们能更好了了解<br>mybatis 内部是怎么执行的，在以后的开发中能更好的使用 mybatis 框架，同时对它的设计理念（设计模式）有<br>一个认识。</p>\n<h3 id=\"2-4-补充（基于注解的-mybatis-使用）\"><a href=\"#2-4-补充（基于注解的-mybatis-使用）\" class=\"headerlink\" title=\"2.4 补充（基于注解的 mybatis 使用）\"></a>2.4 补充（基于注解的 mybatis 使用）</h3><h4 id=\"2-4-1-在持久层接口中添加注解\"><a href=\"#2-4-1-在持久层接口中添加注解\" class=\"headerlink\" title=\"2.4.1 在持久层接口中添加注解\"></a>2.4.1 在持久层接口中添加注解</h4><p>/**<br>*<br>* <p>Title: IUserDao</p><br>* <p>Description: 用户的持久层操作</p></p>\n<p>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br><em>/<br>public interface IUserDao {<br>/**<br>\\</em> 查询所有用户<br>* @return<br>*/<br>@Select(“select * from user”)<br>List<User> findAll();<br>}<br>2.4.2 修改 SqlMapConfig.xml</p>\n<!-- 告知 mybatis 映射配置的位置 -->\n<mappers>\n<mapper class=\"com.itheima.dao.IUserDao\"/>\n</mappers>\n\n<h4 id=\"2-4-3-注意事项：\"><a href=\"#2-4-3-注意事项：\" class=\"headerlink\" title=\"2.4.3 注意事项：\"></a>2.4.3 注意事项：</h4><p>在使用基于注解的 Mybatis 配置时，请移除 xml 的映射配置（IUserDao.xml）。<br>补充</p>\n<h2 id=\"第3章-自定义-Mybatis-框架\"><a href=\"#第3章-自定义-Mybatis-框架\" class=\"headerlink\" title=\"第3章 自定义 Mybatis 框架\"></a>第3章 自定义 Mybatis 框架</h2><h3 id=\"3-1-自定义-Mybatis-框架的分析\"><a href=\"#3-1-自定义-Mybatis-框架的分析\" class=\"headerlink\" title=\"3.1 自定义 Mybatis 框架的分析\"></a>3.1 自定义 Mybatis 框架的分析</h3><h4 id=\"3-1-1-涉及知识点介绍\"><a href=\"#3-1-1-涉及知识点介绍\" class=\"headerlink\" title=\"3.1.1 涉及知识点介绍\"></a>3.1.1 涉及知识点介绍</h4><p>本章我们将使用前面所学的基础知识来构建一个属于自己的持久层框架，将会涉及到的一些知识点：工厂模式<br>（Factory 工厂模式）、构造者模式（Builder 模式）、代理模式，反射，自定义注解，注解的反射， xml 解析，<br>数据库元数据，元数据的反射等。</p>\n<p>3.1.2 分析流程</p>\n<h3 id=\"3-2-前期准备\"><a href=\"#3-2-前期准备\" class=\"headerlink\" title=\"3.2 前期准备\"></a>3.2 前期准备</h3><h4 id=\"3-2-1-创建-Maven-工程\"><a href=\"#3-2-1-创建-Maven-工程\" class=\"headerlink\" title=\"3.2.1 创建 Maven 工程\"></a>3.2.1 创建 Maven 工程</h4><p>创建 mybatis02 的工程，工程信息如下：<br>Groupid:com.itheima<br>ArtifactId:mybatis02<br>Packing:jar</p>\n<h4 id=\"3-2-2-引入相关坐标\"><a href=\"#3-2-2-引入相关坐标\" class=\"headerlink\" title=\"3.2.2 引入相关坐标\"></a>3.2.2 引入相关坐标</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">&lt;!-- 日志坐标 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;1.2.12&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;!-- 解析 xml 的 dom4j --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;dom4j&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;dom4j&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- mysql 驱动 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;5.1.6&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;!-- dom4j 的依赖包 jaxen --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;jaxen&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;jaxen&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;1.1.6&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;4.10&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-2-3-引入工具类到项目中\"><a href=\"#3-2-3-引入工具类到项目中\" class=\"headerlink\" title=\"3.2.3 引入工具类到项目中\"></a>3.2.3 引入工具类到项目中</h4><p>/**<br>* @author 黑马程序员<br>* @Company <a href=\"http://www.ithiema.com/\">http://www.ithiema.com</a><br>* 用于解析配置文件<br>*/<br>public class XMLConfigBuilder {<br>/**<br>* 解析主配置文件，把里面的内容填充到 DefaultSqlSession 所需要的地方<br>* 使用的技术：<br>* dom4j+xpath<br>* @param session<br>*/<br>public static void loadConfiguration(DefaultSqlSession session,InputStream<br>config){<br>try{<br>//定义封装连接信息的配置对象（mybatis 的配置对象）<br>Configuration cfg = new Configuration();<br>//1.获取 SAXReader 对象<br>SAXReader reader = new SAXReader();<br>//2.根据字节输入流获取 Document 对象<br>Document document = reader.read(config);</p>\n<p>//3.获取根节点<br>Element root = document.getRootElement();<br>//4.使用 xpath 中选择指定节点的方式，获取所有 property 节点<br>List<Element> propertyElements = root.selectNodes(“//property”);<br>//5.遍历节点<br>for(Element propertyElement : propertyElements){<br>//判断节点是连接数据库的哪部分信息<br>//取出 name 属性的值<br>String name = propertyElement.attributeValue(“name”);<br>if(“driver”.equals(name)){<br>//表示驱动<br>//获取 property 标签 value 属性的值<br>String driver = propertyElement.attributeValue(“value”);<br>cfg.setDriver(driver);<br>}<br>if(“url”.equals(name)){<br>//表示连接字符串<br>//获取 property 标签 value 属性的值<br>String url = propertyElement.attributeValue(“value”);<br>cfg.setUrl(url);<br>}<br>if(“username”.equals(name)){<br>//表示用户名<br>//获取 property 标签 value 属性的值<br>String username = propertyElement.attributeValue(“value”);<br>cfg.setUsername(username);<br>}<br>if(“password”.equals(name)){<br>//表示密码<br>//获取 property 标签 value 属性的值<br>String password = propertyElement.attributeValue(“value”);<br>cfg.setPassword(password);<br>}<br>}<br>//取出 mappers 中的所有 mapper 标签，判断他们使用了 resource 还是 class 属性<br>List<Element> mapperElements = root.selectNodes(“//mappers/mapper”);<br>//遍历集合<br>for(Element mapperElement : mapperElements){<br>//判断 mapperElement 使用的是哪个属性<br>Attribute attribute = mapperElement.attribute(“resource”);<br>if(attribute != null){<br>System.out.println(“使用的是 XML”);<br>//表示有 resource 属性，用的是 XML<br>//取出属性的值</p>\n<p>String mapperPath = attribute.getValue();// 获 取 属 性 的 值<br>“com/itheima/dao/IUserDao.xml”<br>//把映射配置文件的内容获取出来，封装成一个 map<br>Map&lt;String,Mapper&gt; mappers = loadMapperConfiguration(mapperPath);<br>//给 configuration 中的 mappers 赋值<br>cfg.setMappers(mappers);<br>}else{<br>System.out.println(“使用的是注解”);<br>//表示没有 resource 属性，用的是注解<br>//获取 class 属性的值<br>String daoClassPath = mapperElement.attributeValue(“class”);<br>//根据 daoClassPath 获取封装的必要信息<br>Map&lt;String,Mapper&gt; mappers = loadMapperAnnotation(daoClassPath);<br>//给 configuration 中的 mappers 赋值<br>cfg.setMappers(mappers);<br>}<br>}<br>//把配置对象传递给 DefaultSqlSession<br>session.setCfg(cfg);<br>}catch(Exception e){<br>throw new RuntimeException(e);<br>}finally{<br>try {<br>config.close();<br>}catch(Exception e){<br>e.printStackTrace();<br>}<br>}<br>}<br>/**<br>* 根据传入的参数，解析 XML，并且封装到 Map 中<br>* @param mapperPath 映射配置文件的位置<br>* @return map 中包含了获取的唯一标识（key 是由 dao 的全限定类名和方法名组成）<br>* 以及执行所需的必要信息（value 是一个 Mapper 对象，里面存放的是执行的 SQL 语句和<br>要封装的实体类全限定类名）<br>*/<br>private static Map&lt;String,Mapper&gt; loadMapperConfiguration(String<br>mapperPath)throws IOException {<br>InputStream in = null;<br>try{<br>//定义返回值对象<br>Map&lt;String,Mapper&gt; mappers = new HashMap&lt;String,Mapper&gt;();</p>\n<p>//1.根据路径获取字节输入流<br>in = Resources.getResourceAsStream(mapperPath);<br>//2.根据字节输入流获取 Document 对象<br>SAXReader reader = new SAXReader();<br>Document document = reader.read(in);<br>//3.获取根节点<br>Element root = document.getRootElement();<br>//4.获取根节点的 namespace 属性取值<br>String namespace = root.attributeValue(“namespace”);//是组成 map 中 key 的<br>部分<br>//5.获取所有的 select 节点<br>List<Element> selectElements = root.selectNodes(“//select”);<br>//6.遍历 select 节点集合<br>for(Element selectElement : selectElements){</p>\n<table>\n<thead>\n<tr>\n<th>//取出 id 属性的值</th>\n<th>组成 map 中 key 的部分</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String id = selectElement.attributeValue(“id”);</td>\n<td></td>\n</tr>\n<tr>\n<td>//取出 resultType 属性的值</td>\n<td>组成 map 中 value 的部分</td>\n</tr>\n<tr>\n<td>String resultType = selectElement.attributeValue(“resultType”);</td>\n<td></td>\n</tr>\n<tr>\n<td>//取出文本内容</td>\n<td>组成 map 中 value 的部分</td>\n</tr>\n</tbody></table>\n<p>String queryString = selectElement.getText();<br>//创建 Key<br>String key = namespace+”.”+id;<br>//创建 Value<br>Mapper mapper = new Mapper();<br>mapper.setQueryString(queryString);<br>mapper.setResultType(resultType);<br>//把 key 和 value 存入 mappers 中<br>mappers.put(key,mapper);<br>}<br>return mappers;<br>}catch(Exception e){<br>throw new RuntimeException(e);<br>}finally{<br>in.close();<br>}<br>}<br>/**<br>* 根据传入的参数，得到 dao 中所有被 select 注解标注的方法。<br>* 根据方法名称和类名，以及方法上注解 value 属性的值，组成 Mapper 的必要信息<br>* @param daoClassPath<br>* @return<br>*/<br>private static Map&lt;String,Mapper&gt; loadMapperAnnotation(String</p>\n<p>daoClassPath)throws Exception{<br>//定义返回值对象<br>Map&lt;String,Mapper&gt; mappers = new HashMap&lt;String, Mapper&gt;();<br>//1.得到 dao 接口的字节码对象<br>Class daoClass = Class.forName(daoClassPath);<br>//2.得到 dao 接口中的方法数组<br>Method[] methods = daoClass.getMethods();<br>//3.遍历 Method 数组<br>for(Method method : methods){<br>//取出每一个方法，判断是否有 select 注解<br>boolean isAnnotated = method.isAnnotationPresent(Select.class);<br>if(isAnnotated){<br>//创建 Mapper 对象<br>Mapper mapper = new Mapper();<br>//取出注解的 value 属性值<br>Select selectAnno = method.getAnnotation(Select.class);<br>String queryString = selectAnno.value();<br>mapper.setQueryString(queryString);<br>//获取当前方法的返回值，还要求必须带有泛型信息<br>Type type = method.getGenericReturnType();//List<User><br>//判断 type 是不是参数化的类型<br>if(type instanceof ParameterizedType){<br>//强转<br>ParameterizedType ptype = (ParameterizedType)type;<br>//得到参数化类型中的实际类型参数<br>Type[] types = ptype.getActualTypeArguments();<br>//取出第一个<br>Class domainClass = (Class)types[0];<br>//获取 domainClass 的类名<br>String resultType = domainClass.getName();<br>//给 Mapper 赋值<br>mapper.setResultType(resultType);<br>}<br>//组装 key 的信息<br>//获取方法的名称<br>String methodName = method.getName();<br>String className = method.getDeclaringClass().getName();<br>String key = className+”.”+methodName;<br>//给 map 赋值<br>mappers.put(key,mapper);<br>}<br>}<br>return mappers;</p>\n<p>}<br>}<br>/**<br>* @author 黑马程序员<br>* @Company <a href=\"http://www.ithiema.com/\">http://www.ithiema.com</a><br>* 负责执行 SQL 语句，并且封装结果集<br>*/<br>public class Executor {<br>public <E> List<E> selectList(Mapper mapper, Connection conn) {<br>PreparedStatement pstm = null;<br>ResultSet rs = null;<br>try {<br>//1.取出 mapper 中的数据<br>String queryString = mapper.getQueryString();//select * from user<br>String resultType = mapper.getResultType();//com.itheima.domain.User<br>Class domainClass = Class.forName(resultType);//User.class<br>//2.获取 PreparedStatement 对象<br>pstm = conn.prepareStatement(queryString);<br>//3.执行 SQL 语句，获取结果集<br>rs = pstm.executeQuery();<br>//4.封装结果集<br>List<E> list = new ArrayList<E>();//定义返回值<br>while(rs.next()) {<br>//实例化要封装的实体类对象<br>E obj = (E)domainClass.newInstance();//User 对象<br>//取出结果集的元信息： ResultSetMetaData<br>ResultSetMetaData rsmd = rs.getMetaData();<br>//取出总列数<br>int columnCount = rsmd.getColumnCount();<br>//遍历总列数<br>for (int i = 1; i &lt;= columnCount; i++) {<br>//获取每列的名称，列名的序号是从 1 开始的<br>String columnName = rsmd.getColumnName(i);<br>//根据得到列名，获取每列的值<br>Object columnValue = rs.getObject(columnName);<br>//给 obj 赋值：使用 Java 内省机制（借助 PropertyDescriptor 实现属性的封装）<br>PropertyDescriptor pd = new<br>PropertyDescriptor(columnName,domainClass);//要求：实体类的属性和数据库表的列名保持一种<br>//获取它的写入方法</p>\n<p>Method writeMethod = pd.getWriteMethod();//setUsername(String<br>username);<br>//把获取的列的值，给对象赋值<br>writeMethod.invoke(obj,columnValue);<br>}<br>//把赋好值的对象加入到集合中<br>list.add(obj);<br>}<br>return list;<br>} catch (Exception e) {<br>throw new RuntimeException(e);<br>} finally {<br>release(pstm,rs);<br>}<br>}<br>private void release(PreparedStatement pstm,ResultSet rs){<br>if(rs != null){<br>try {<br>rs.close();<br>}catch(Exception e){<br>e.printStackTrace();<br>}<br>}<br>if(pstm != null){<br>try {<br>pstm.close();<br>}catch(Exception e){<br>e.printStackTrace();<br>}<br>}<br>}<br>}<br>/**<br>*<br>* <p>Title: DataSourceUtil</p><br>* <p>Description: 数据源的工具类</p><br>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br>*/</p>\n<p>public class DataSourceUtil {<br>/**<br>* 获取连接<br>* @param cfg<br>* @return<br>*/<br>public static Connection getConnection(Configuration cfg) {<br>try {<br>Class.forName(cfg.getDriver());<br>Connection conn =<br>DriverManager.getConnection(cfg.getUrl(),cfg.getUsername() , cfg.getPassword());<br>return conn;<br>} catch (Exception e) {<br>throw new RuntimeException(e);<br>}<br>}<br>}<br>3.2.4 编写 SqlMapConfig.xml<br><?xml version=\"1.0\" encoding=\"UTF-8\" ?><br><configuration><br><environments default=\"development\"><br><environment id=\"development\"><br><transactionManager type=\"JDBC\" /><br><dataSource type=\"POOLED\"><br><property name=\"driver\" value=\"com.mysql.jdbc.Driver\" ></property><br><property name=\"url\" value=\"jdbc:mysql:///eesy\" ></property><br><property name=\"username\" value=\"root\"></property><br><property name=\"password\" value=\"1234\"></property><br></dataSource><br></environment><br></environments><br></configuration><br>注意：<br>此处我们直接使用的是 mybatis 的配置文件， 但是由于我们没有使用 mybatis 的 jar 包，所以要把配<br>置文件的约束删掉否则会报错（如果电脑能接入互联网，不删也行）</p>\n<h4 id=\"3-2-5-编写读取配置文件类\"><a href=\"#3-2-5-编写读取配置文件类\" class=\"headerlink\" title=\"3.2.5 编写读取配置文件类\"></a>3.2.5 编写读取配置文件类</h4><p>/**<br>*<br>* <p>Title: Resources</p><br>* <p>Description: 用于读取配置文件的类</p><br>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br><em>/<br>public class Resources {<br>/**<br>\\</em> 用于加载 xml 文件，并且得到一个流对象<br>* @param xmlPath<br>* @return<br>* 在实际开发中读取配置文件:<br>* 第一：使用类加载器。但是有要求： a 文件不能过大。 b 文件必须在类路径下(classpath)<br>* 第二：使用 ServletContext 的 getRealPath()<br>*/<br>public static InputStream getResourceAsStream(String xmlPath) {<br>return Resources.class.getClassLoader().getResourceAsStream(xmlPath);<br>}<br>}</p>\n<h4 id=\"3-2-6-编写-Mapper-类\"><a href=\"#3-2-6-编写-Mapper-类\" class=\"headerlink\" title=\"3.2.6 编写 Mapper 类\"></a>3.2.6 编写 Mapper 类</h4><p>/**<br>*<br>* <p>Title: Mapper</p><br>* <p>Description: 用于封装查询时的必要信息：要执行的 SQL 语句和实体类的全限定类名</p><br>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br>*/<br>public class Mapper {<br>private String queryString;//sql<br>private String resultType;//结果类型的全限定类名<br>public String getQueryString() {<br>return queryString;<br>}<br>public void setQueryString(String queryString) {<br>this.queryString = queryString;<br>}<br>public String getResultType() {</p>\n<p>return resultType;<br>}<br>public void setResultType(String resultType) {<br>this.resultType = resultType;<br>}<br>}</p>\n<h4 id=\"3-2-7-编写-Configuration-配置类\"><a href=\"#3-2-7-编写-Configuration-配置类\" class=\"headerlink\" title=\"3.2.7 编写 Configuration 配置类\"></a>3.2.7 编写 Configuration 配置类</h4><p>/**<br>* 核心配置类<br>* 1.数据库信息<br>* 2.sql 的 map 集合<br>*/<br>public class Configuration {<br>private String username; //用户名<br>private String password;//密码<br>private String url;//地址<br>private String driver;//驱动<br>//map 集合 Map&lt;唯一标识， Mapper&gt; 用于保存映射文件中的 sql 标识及 sql 语句<br>private Map&lt;String,Mapper&gt; mappers;<br>public String getUsername() {<br>return username;<br>}<br>public void setUsername(String username) {<br>this.username = username;<br>}<br>public String getPassword() {<br>return password;<br>}<br>public void setPassword(String password) {<br>this.password = password;<br>}<br>public String getUrl() {<br>return url;<br>}<br>public void setUrl(String url) {<br>this.url = url;<br>}<br>public String getDriver() {</p>\n<p>return driver;<br>}<br>public void setDriver(String driver) {<br>this.driver = driver;<br>}<br>public Map&lt;String, Mapper&gt; getMappers() {<br>return mappers;<br>}<br>public void setMappers(Map&lt;String, Mapper&gt; mappers) {<br>this.mappers = mappers;<br>}<br>}</p>\n<h4 id=\"3-2-8-编写-User-实体类\"><a href=\"#3-2-8-编写-User-实体类\" class=\"headerlink\" title=\"3.2.8 编写 User 实体类\"></a>3.2.8 编写 User 实体类</h4><p>User 实体类：<br>public class User implements Serializable {<br>private int id;<br>private String username;// 用户姓名<br>private String sex;// 性别<br>private Date birthday;// 生日<br>private String address;// 地址<br>//省略 getter 与 setter<br>@Override<br>public String toString() {<br>return “User [id=” + id + “, username=” + username + “, sex=” + sex<br>+ “, birthday=” + birthday + “, address=” + address + “]”;<br>}<br>}</p>\n<h3 id=\"3-3-基于-XML-的自定义-mybatis-框架\"><a href=\"#3-3-基于-XML-的自定义-mybatis-框架\" class=\"headerlink\" title=\"3.3 基于 XML 的自定义 mybatis 框架\"></a>3.3 基于 XML 的自定义 mybatis 框架</h3><h4 id=\"3-3-1-编写持久层接口和-IUserDao-xml\"><a href=\"#3-3-1-编写持久层接口和-IUserDao-xml\" class=\"headerlink\" title=\"3.3.1 编写持久层接口和 IUserDao.xml\"></a>3.3.1 编写持久层接口和 IUserDao.xml</h4><p>/**<br>*<br>* <p>Title: IUserDao</p><br>* <p>Description: 用户的持久层操作</p><br>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br>*/</p>\n<p>public interface IUserDao {<br>/**<br>* 查询所有用户<br>* @return<br>*/<br>List<User> findAll();<br>}<br><?xml version=\"1.0\" encoding=\"UTF-8\"?><br><mapper namespace=\"com.itheima.dao.IUserDao\"></p>\n<!-- 配置查询所有操作 -->\n\n<select id=\"findAll\" resultType=\"com.itheima.domain.User\">\nselect * from user\n</select>\n\n</mapper>\n注意：\n此处我们使用的也是 mybatis 的配置文件，所以也要把约束删除了\n\n<h4 id=\"3-3-2-编写构建者类\"><a href=\"#3-3-2-编写构建者类\" class=\"headerlink\" title=\"3.3.2 编写构建者类\"></a>3.3.2 编写构建者类</h4><p>/**<br>*<br>* <p>Title: SqlSessionFactoryBuilder</p><br>* <p>Description: 用于构建 SqlSessionFactory 的</p><br>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br><em>/<br>public class SqlSessionFactoryBuilder {<br>/**<br>\\</em> 根据传入的流，实现对 SqlSessionFactory 的创建<br>* @param in 它就是 SqlMapConfig.xml 的配置以及里面包含的 IUserDao.xml 的配置<br>* @return<br>*/<br>public SqlSessionFactory build(InputStream in) {<br>DefaultSqlSessionFactory factory = new DefaultSqlSessionFactory();<br>//给 factory 中 config 赋值<br>factory.setConfig(in);<br>return factory;<br>}<br>}</p>\n<h4 id=\"3-3-3-编写-SqlSessionFactory-接口和实现类\"><a href=\"#3-3-3-编写-SqlSessionFactory-接口和实现类\" class=\"headerlink\" title=\"3.3.3 编写 SqlSessionFactory 接口和实现类\"></a>3.3.3 编写 SqlSessionFactory 接口和实现类</h4><p>/**<br>*<br>* <p>Title: SqlSessionFactory</p><br>* <p>Description: SqlSessionFactory 的接口</p><br>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br><em>/<br>public interface SqlSessionFactory {<br>/**<br>\\</em> 创建一个新的 SqlSession 对象<br>* @return<br>*/<br>SqlSession openSession();<br>}<br>/**<br>*<br>* <p>Title: DefaultSqlSessionFactory</p><br>* <p>Description:SqlSessionFactory 的默认实现 </p><br>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br>*/<br>public class DefaultSqlSessionFactory implements SqlSessionFactory {<br>private InputStream config = null;<br>public void setConfig(InputStream config) {<br>this.config = config;<br>}<br>@Override<br>public SqlSession openSession() {<br>DefaultSqlSession session = new DefaultSqlSession();<br>//调用工具类解析 xml 文件<br>XMLConfigBuilder.loadConfiguration(session, config);<br>return session;<br>}<br>}</p>\n<h4 id=\"3-3-4-编写-SqlSession-接口和实现类\"><a href=\"#3-3-4-编写-SqlSession-接口和实现类\" class=\"headerlink\" title=\"3.3.4 编写 SqlSession 接口和实现类\"></a>3.3.4 编写 SqlSession 接口和实现类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Title: SqlSession&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Description: 操作数据库的核心对象&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SqlSession</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\\* 创建 Dao 接口的代理对象</span></span><br><span class=\"line\"><span class=\"comment\">\\* <span class=\"doctag\">@param</span> daoClass</span></span><br><span class=\"line\"><span class=\"comment\">\\* <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">getMapper</span><span class=\"params\">(Class&lt;T&gt; daoClass)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\\* 释放资源</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Title: DefaultSqlSession&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Description: SqlSession 的具体实现&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultSqlSession</span> <span class=\"keyword\">implements</span> <span class=\"title\">SqlSession</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//核心配置对象</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Configuration cfg;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCfg</span><span class=\"params\">(Configuration cfg)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.cfg = cfg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//连接对象</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Connection conn;</span><br><span class=\"line\"><span class=\"comment\">//调用 DataSourceUtils 工具类获取连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">getConn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">conn = DataSourceUtil.getDataSource(cfg).getConnection();</span><br><span class=\"line\"><span class=\"keyword\">return</span> conn;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\\* 动态代理：</span></span><br><span class=\"line\"><span class=\"comment\">\\* 涉及的类： Proxy</span></span><br><span class=\"line\"><span class=\"comment\">\\* 使用的方法： newProxyInstance</span></span><br><span class=\"line\"><span class=\"comment\">\\* 方法的参数：</span></span><br><span class=\"line\"><span class=\"comment\">\\* ClassLoader：和被代理对象使用相同的类加载器,通常都是固定的</span></span><br><span class=\"line\"><span class=\"comment\">\\* Class[]：代理对象和被代理对象要求有相同的行为。（具有相同的方法）</span></span><br><span class=\"line\"><span class=\"comment\">\\* InvocationHandler：如何代理。需要我们自己提供的增强部分的代码</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getMapper</span><span class=\"params\">(Class&lt;T&gt; daoClass)</span> </span>&#123;</span><br><span class=\"line\">conn = getConn();</span><br><span class=\"line\">System.out.println(conn);</span><br><span class=\"line\">T daoProxy = (T) Proxy.newProxyInstance(daoClass.getClassLoader(),<span class=\"keyword\">new</span></span><br><span class=\"line\">Class[] &#123;daoClass&#125;, <span class=\"keyword\">new</span> MapperProxyFactory(cfg.getMappers(),conn));</span><br><span class=\"line\"><span class=\"keyword\">return</span> daoProxy;</span><br><span class=\"line\">&#125; /</span><br><span class=\"line\">/释放资源</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">System.out.println(conn);</span><br><span class=\"line\">conn.close();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查询所有方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;E&gt; <span class=\"function\">List&lt;E&gt; <span class=\"title\">selectList</span><span class=\"params\">(String statement)</span></span>&#123;</span><br><span class=\"line\">Mapper mapper = cfg.getMappers().get(statement);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Executor().selectList(mapper,conn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h4 id=\"3-3-5-编写用于创建-Dao-接口代理对象的类\"><a href=\"#3-3-5-编写用于创建-Dao-接口代理对象的类\" class=\"headerlink\" title=\"3.3.5 编写用于创建 Dao 接口代理对象的类\"></a>3.3.5 编写用于创建 Dao 接口代理对象的类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Title: MapperProxyFactory&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Description: 用于创建代理对象是增强方法&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapperProxyFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String,Mapper&gt; mappers;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Connection conn;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MapperProxyFactory</span><span class=\"params\">(Map&lt;String, Mapper&gt; mappers,Connection conn)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.mappers = mappers;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.conn = conn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\\* 对当前正在执行的方法进行增强</span></span><br><span class=\"line\"><span class=\"comment\">\\* 取出当前执行的方法名称</span></span><br><span class=\"line\"><span class=\"comment\">\\* 取出当前执行的方法所在类</span></span><br><span class=\"line\"><span class=\"comment\">\\* 拼接成 key</span></span><br><span class=\"line\"><span class=\"comment\">\\* 去 Map 中获取 Value（Mapper)</span></span><br><span class=\"line\"><span class=\"comment\">\\* 使用工具类 Executor 的 selectList 方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//1.取出方法名</span></span><br><span class=\"line\">String methodName = method.getName();</span><br><span class=\"line\"><span class=\"comment\">//2.取出方法所在类名</span></span><br><span class=\"line\">String className = method.getDeclaringClass().getName();</span><br><span class=\"line\"><span class=\"comment\">//3.拼接成 Key</span></span><br><span class=\"line\">String key = className+<span class=\"string\">&quot;.&quot;</span>+methodName;</span><br><span class=\"line\"><span class=\"comment\">//4.使用 key 取出 mapper</span></span><br><span class=\"line\">Mapper mapper = mappers.get(key);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(mapper == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;传入的参数有误，无法获取执行的必要条件</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//5.创建 Executor 对象</span></span><br><span class=\"line\">Executor executor = <span class=\"keyword\">new</span> Executor();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> executor.selectList(mapper, conn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3.3.6 运行测试类</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Title: MybatisTest&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Description: 测试 mybatis 的环境&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\\* &lt;p&gt;Company: http://www.itheima.com/ &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisTest</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//1.读取配置文件</span></span><br><span class=\"line\">InputStream in = Resources.getResourceAsStream(<span class=\"string\">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//2.创建 SqlSessionFactory 的构建者对象</span></span><br><span class=\"line\">SqlSessionFactoryBuilder builder = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder();</span><br><span class=\"line\"><span class=\"comment\">//3.使用构建者创建工厂对象 SqlSessionFactory</span></span><br><span class=\"line\">SqlSessionFactory factory = builder.build(in);</span><br><span class=\"line\"><span class=\"comment\">//4.使用 SqlSessionFactory 生产 SqlSession 对象</span></span><br><span class=\"line\">SqlSession session = factory.openSession();</span><br><span class=\"line\"><span class=\"comment\">//5.使用 SqlSession 创建 dao 接口的代理对象</span></span><br><span class=\"line\">IUserDao userDao = session.getMapper(IUserDao.class);</span><br><span class=\"line\"><span class=\"comment\">//6.使用代理对象执行查询所有方法</span></span><br><span class=\"line\">List&lt;User&gt; users = userDao.findAll();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(User user : users) &#123;</span><br><span class=\"line\">System.out.println(user);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//7.释放资源</span></span><br><span class=\"line\">session.close();</span><br><span class=\"line\">in.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-4-基于注解方式定义-Mybatis-框架\"><a href=\"#3-4-基于注解方式定义-Mybatis-框架\" class=\"headerlink\" title=\"3.4 基于注解方式定义 Mybatis 框架\"></a>3.4 基于注解方式定义 Mybatis 框架</h4><h4 id=\"3-4-1-自定义-Select-注解\"><a href=\"#3-4-1-自定义-Select-注解\" class=\"headerlink\" title=\"3.4.1 自定义@Select 注解\"></a>3.4.1 自定义@Select 注解</h4><p>/**</p>\n<p>*<br>* <p>Title: Select</p><br>* <p>Description: 自定义查询注解</p><br>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br>*/<br>@Retention(RetentionPolicy.RUNTIME)<br>@Target(ElementType.METHOD)<br>public @interface Select {<br>String value();<br>}</p>\n<h4 id=\"3-4-2-修改持久层接口\"><a href=\"#3-4-2-修改持久层接口\" class=\"headerlink\" title=\"3.4.2 修改持久层接口\"></a>3.4.2 修改持久层接口</h4><p>/**<br>*<br>* <p>Title: IUserDao</p><br>* <p>Description: 用户的持久层操作</p><br>* <p>Company: <a href=\"http://www.itheima.com/\">http://www.itheima.com/</a> </p><br><em>/<br>public interface IUserDao {<br>/**<br>\\</em> 查询所有用户<br>* @return<br>*/<br>@Select(“select * from user”)<br>List<User> findAll();<br>}</p>\n<h4 id=\"3-4-3-修改-SqlMapConfig-xml\"><a href=\"#3-4-3-修改-SqlMapConfig-xml\" class=\"headerlink\" title=\"3.4.3 修改 SqlMapConfig.xml\"></a>3.4.3 修改 SqlMapConfig.xml</h4><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n<!-- 配置 mybatis 的环境 -->\n<environments default=\"mysql\">\n<!-- 配置 mysql 的环境 -->\n<environment id=\"mysql\">\n<!-- 配置事务的类型 -->\n<transactionManager type=\"JDBC\"></transactionManager>\n<!-- 配置连接数据库的信息：用的是数据源(连接池) -->\n<dataSource type=\"POOLED\">\n\n\n<property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n<property name=\"url\" value=\"jdbc:mysql://localhost:3306/ee50\"/>\n<property name=\"username\" value=\"root\"/>\n<property name=\"password\" value=\"1234\"/>\n</dataSource>\n</environment>\n</environments>\n<!-- 告知 mybatis 映射配置的位置 -->\n<mappers>\n<mapper class=\"com.itheima.dao.IUserDao\"/>\n</mappers>\n</configuration>\n\n<h3 id=\"3-5-自定义-Mybatis-的设计模式说明\"><a href=\"#3-5-自定义-Mybatis-的设计模式说明\" class=\"headerlink\" title=\"3.5 自定义 Mybatis 的设计模式说明\"></a>3.5 自定义 Mybatis 的设计模式说明</h3><h4 id=\"3-5-1-工厂模式（SqlSessionFactory）\"><a href=\"#3-5-1-工厂模式（SqlSessionFactory）\" class=\"headerlink\" title=\"3.5.1 工厂模式（SqlSessionFactory）\"></a>3.5.1 工厂模式（SqlSessionFactory）</h4><p>工厂模式的原理如下图：</p>\n<h4 id=\"3-5-2-代理模式-MapperProxyFactory\"><a href=\"#3-5-2-代理模式-MapperProxyFactory\" class=\"headerlink\" title=\"3.5.2 代理模式(MapperProxyFactory)\"></a>3.5.2 代理模式(MapperProxyFactory)</h4><p>代理模式分为静态和动态代理。 静态代理，我们通常都很熟悉。有一个写好的代理类，实现与要代理的类的一<br>个共同的接口，目的是为了约束也为了安全。具体不再多说。<br>这里主要想说的是关于动态代理。我们知道静态代理若想代理多个类，实现扩展功能，那么它必须具有多个代<br>理类分别取代理不同的实现类。这样做的后果是造成太多的代码冗余。那么我们会思考如果做，才能既满足需求，<br>又没有太多的冗余代码呢？ ——————动态代理。通过前面的课程我们已经学过了基于 JDK 的动态代理实现方式，今<br>天我们就会使用 JDK 动态代理方式来编写 MapperProxyFactory 类。<br>动态代理模型图：</p>\n<h4 id=\"3-5-3-构建者模式-SqlSessionFactoryBuilder\"><a href=\"#3-5-3-构建者模式-SqlSessionFactoryBuilder\" class=\"headerlink\" title=\"3.5.3 构建者模式(SqlSessionFactoryBuilder)\"></a>3.5.3 构建者模式(SqlSessionFactoryBuilder)</h4><p>从图中我们可以看出，创建者模式由四部分组成。<br>抽象创建者角色：给出一个抽象接口，以规范产品对象的各个组成成分的建造。一般而言，此接口独立于应用<br>程序的商业逻辑。模式中直接创建产品对象的是具体创建者角色。具体创建者必须实现这个接口的两种方法：一是<br>建造方法，比如图中的 buildPart1 和 buildPart2 方法；另一种是结果返回方法，即图中的 getProduct 方<br>法。一般来说，产品所包含的零件数目与建造方法的数目相符。换言之，有多少零件，就有多少相应的建造方法。<br>具体创建者角色： 他们在应用程序中负责创建产品的实例。这个角色要完成的任务包括：<br>1、实现抽象创建者所声明的抽象方法，给出一步一步的完成产品创建实例的操作。<br>2、在创建完成后，提供产品的实例。<br>导演者角色： 这个类调用具体创建者角色以创建产品对象。但是导演者并没有产品类的具体知识，真正拥有产<br>品类的具体知识的是具体创建者角色。<br>产品角色： 产品便是建造中的复杂对象。一般说来，一个系统中会有多于一个的产品类，而且这些产品类并不<br>一定有共同的接口，而完全可以使不相关联的。</p>\n<h4 id=\"3-5-4-小结\"><a href=\"#3-5-4-小结\" class=\"headerlink\" title=\"3.5.4 小结\"></a>3.5.4 小结</h4><p>通过自定义 Mybatis 框架的学习，我们将前面的基础知识很好的结合在一起，并且强化了我们的设计模式及<br>使用。希望大家能够抽时间多练习，这也是系统架构师的必由之路。</p>\n","categories":[{"name":"web","slug":"web","count":1,"path":"api/categories/web.json"}],"tags":[{"name":"-Mybatis -web","slug":"Mybatis-web","count":1,"path":"api/tags/Mybatis-web.json"}]}