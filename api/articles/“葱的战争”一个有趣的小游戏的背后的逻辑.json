{"title":"“葱的战争”一个有趣的小游戏的背后的逻辑","slug":"“葱的战争”一个有趣的小游戏的背后的逻辑","date":"2020-09-14T06:44:12.112Z","updated":"2020-09-16T03:42:22.551Z","comments":true,"path":"api/articles/“葱的战争”一个有趣的小游戏的背后的逻辑.json","photos":[],"link":"","excerpt":"题目前短时间，同学给看了一道，某个历年的考研机试题。我想用面向对象的方法去实现。一个m*n的棋盘，上面有k根葱，每根葱面朝方向为d（0123分别表示上下左右），每根葱一个战斗力f。每隔时间葱会向面朝方向走一格， 如果遇到棋盘边界，那么他将把面朝方向转180度（此回合葱不会走动），如果某个时刻有两个或以上的葱在同一位置，那么他们将发生 战争，只有战斗力最高的葱存活，其他的葱全部原地枯萎，不在走动，求经过t时间后所有葱的位置。","covers":["https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/20200916113748.png"],"content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>前短时间，同学给看了一道，某个历年的考研机试题。我想用面向对象的方法去实现。</p>\n<blockquote>\n<p>一个m*n的棋盘，上面有k根葱，每根葱面朝方向为d（0123分别表示上下左右），每根葱一个战斗力f。每隔时间葱会向面朝方向走一格， 如果遇到棋盘边界，那么他将把面朝方向转180度（此回合葱不会走动），如果某个时刻有两个或以上的葱在同一位置，那么他们将发生 战争，只有战斗力最高的葱存活，其他的葱全部原地枯萎，不在走动，求经过t时间后所有葱的位置。</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p>输入：第一行m n k，然后接下来k行每根葱的信息x y d f（坐标，方向，战斗力），最后一行输入时间t。  </p>\n<p>输出：k行，分别表示每个葱的位置。  </p>\n<p>数据范围：m和n在100内，k在1000内，t在1000内，f在1000内，保证初始每颗葱位置不同，战斗力不同。</p>\n</blockquote>\n<h4 id=\"Java面向对象写法\"><a href=\"#Java面向对象写法\" class=\"headerlink\" title=\"Java面向对象写法\"></a>Java面向对象写法</h4><p>1，建一个Cong（葱）类。</p>\n<p>（1）数据成员：x 横坐标，y 纵坐标，d 方向，f 战斗力，isLive 是否存活（默认存活）。</p>\n<blockquote>\n<p>private int x;</p>\n<p>private int y;</p>\n<p>private int d;</p>\n<p>private int f;</p>\n<p>private boolean isLive = true;</p>\n</blockquote>\n<p>（2）主要成员方法：</p>\n<p>走：</p>\n<blockquote>\n<p>public void go() {// 走</p>\n<p>if (!isLive)</p>\n<p>return;</p>\n<p>switch (d) {</p>\n<p>case 0:</p>\n<p>y++;</p>\n<p>break;</p>\n<p>case 1:</p>\n<p>y–;</p>\n<p>break;</p>\n<p>case 2:</p>\n<p>x–;</p>\n<p>break;</p>\n<p>case 3:</p>\n<p>x++;</p>\n<p>break;</p>\n<p>}</p>\n<p>}</p>\n</blockquote>\n<p>转向：</p>\n<blockquote>\n<p>public void turn() {// 转向</p>\n<p>if (!this.isLive)</p>\n<p>return;</p>\n<p>switch (d) {</p>\n<p>case 0:</p>\n<p>d = 1;</p>\n<p>break;</p>\n<p>case 1:</p>\n<p>d = 0;</p>\n<p>break;</p>\n<p>case 2:</p>\n<p>d = 3;</p>\n<p>break;</p>\n<p>case 3:</p>\n<p>d = 2;</p>\n<p>break;</p>\n<p>}</p>\n<p>}</p>\n</blockquote>\n<p>打架：</p>\n<blockquote>\n<p>public void fight(Cong c) {// 打架</p>\n<p>if (!this.isLive || !c.isLive())// 死了没？</p>\n<p>return;</p>\n<p>if (this.x == c.getX() &amp;&amp; this.y == c.getY()) {// 遇见没？</p>\n<p>if (this.f &gt; c.getF()) {</p>\n<p>c.setLive(false);</p>\n<p>} else if (this.f &lt; c.getF()) {</p>\n<p>this.setLive(false);</p>\n<p>} else {</p>\n<p>this.setLive(false);</p>\n<p>c.setLive(false);</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n</blockquote>\n<p>2，Pan（棋盘）类</p>\n<p>（1）数据成员：m 宽度，n 高度，g 葱的集合。</p>\n<blockquote>\n<p>private int m;</p>\n<p>private int n;</p>\n<p>private List<Cong> g;</p>\n</blockquote>\n<p>（2）主要方法：</p>\n<blockquote>\n<p>public void run() {</p>\n<p>for (Cong c : g) {</p>\n<p>if (!c.isLive())// 死亡</p>\n<p>continue;</p>\n<p>war(c);// 战争</p>\n<p>if (isTurn(c)) {// 行动</p>\n<p>c.turn();</p>\n<p>} else {</p>\n<p>c.go();</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>public boolean isTurn(Cong c) {// 是否转向</p>\n<p>if (c.getX() == 0 &amp;&amp; c.getD() == 2)</p>\n<p>return true;</p>\n<p>if (c.getX() == m - 1 &amp;&amp; c.getD() == 4)</p>\n<p>return true;</p>\n<p>if (c.getY() == 0 &amp;&amp; c.getD() == 1)</p>\n<p>return true;</p>\n<p>if (c.getX() == n - 1 &amp;&amp; c.getD() == 0)</p>\n<p>return true;</p>\n<p>return false;</p>\n<p>}</p>\n<p>public void war(Cong c) {</p>\n<p>for (Cong c1 : g) {</p>\n<p>if (c != c1)// 不跟自己打</p>\n<p>c.fight(c1);</p>\n<p>}</p>\n<p>}</p>\n</blockquote>\n<p>3，客户端代码</p>\n<blockquote>\n<p>public class Client {// 客户端</p>\n<p>public static void main(String[] args) {</p>\n<p>// 输入</p>\n<p>Scanner can = new Scanner(System.in);</p>\n<p>int m = can.nextInt();</p>\n<p>int n = can.nextInt();</p>\n<p>int k = can.nextInt();</p>\n<p>List<Cong> g = new ArrayList<Cong>();</p>\n<p>for (int i = 0; i &lt; k; i++) {</p>\n<p>int x = can.nextInt();</p>\n<p>int y = can.nextInt();</p>\n<p>int d = can.nextInt();</p>\n<p>int f = can.nextInt();</p>\n<p>Cong c = new Cong(x, y, d, f);</p>\n<p>g.add(c);</p>\n<p>}</p>\n<p>int t = can.nextInt();</p>\n<p>can.close();</p>\n<p>// 逻辑操作</p>\n<p>Pan p = new Pan(m, n, g);</p>\n<p>for (int i = 0; i &lt; t; i++) {// 执行t次</p>\n<p>p.run();</p>\n<p>}</p>\n<p>// 输出</p>\n<p>for (int i = 0; i &lt; k; i++) {</p>\n<p>Cong c = g.get(i);</p>\n<p>System.out.print(c.getX() + “ “ + c.getY() + “\\n”);</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n</blockquote>\n<img src=\"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/20200916113748.png\" style=\"zoom:60%;\" />\n\n<h4 id=\"附页\"><a href=\"#附页\" class=\"headerlink\" title=\"附页\"></a>附页</h4><p>源码地址：<a href=\"https://github.com/wzmyyj/CongWar\">https://github.com/wzmyyj/CongWar</a></p>\n","categories":[{"name":"JAVA语言","slug":"JAVA语言","count":1,"path":"api/categories/JAVA语言.json"}],"tags":[{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"},{"name":"小游戏","slug":"小游戏","count":2,"path":"api/tags/小游戏.json"}]}