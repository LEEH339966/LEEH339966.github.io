{"total":17,"pageSize":10,"pageCount":2,"data":[{"title":"在centos服务器上利用gunicorn+nginx+django结构部署自己的网站","slug":"在centos服务器上利用gunicorn+nginx+django结构部署自己的网站","date":"2020-12-02T12:45:53.581Z","updated":"2020-12-02T12:45:29.129Z","comments":true,"path":"api/articles/在centos服务器上利用gunicorn+nginx+django结构部署自己的网站.json","excerpt":"","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/ad16bfb15867f2b31729dd968156b307.jpg","content":"<hr>\n<h2 id=\"在centos服务器上利用gunicorn-nginx-django结构部署自己的网站\"><a href=\"#在centos服务器上利用gunicorn-nginx-django结构部署自己的网站\" class=\"headerlink\" title=\"在centos服务器上利用gunicorn+nginx+django结构部署自己的网站\"></a>在centos服务器上利用gunicorn+nginx+django结构部署自己的网站</h2><p>最近在研究如何将本地的项目部署到服务器上，踩了不少的坑，断断续续用了2天时间，着实辛苦 特来记录一下。</p>\n<img src=\"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/ad16bfb15867f2b31729dd968156b307.jpg\" style=\"zoom: 67%;\" />\n\n<h3 id=\"项目的准备\"><a href=\"#项目的准备\" class=\"headerlink\" title=\"项目的准备\"></a>项目的准备</h3><p>首先第一步将自己的项目上传到服务器上，我使用的pycharm 配置服务器地址然后后上传的方式，同样也可以利用git工具上传。</p>\n<h3 id=\"创建虚拟的环境\"><a href=\"#创建虚拟的环境\" class=\"headerlink\" title=\"创建虚拟的环境\"></a>创建虚拟的环境</h3><p>项目移植成功了，我们还需要来移植一个单独给项目使用的环境，所以需要使用虚拟环境。虚拟环境的安装和配置操作方式这里也不做说明，这里只介绍创建虚拟环境的过程。</p>\n<p>在当前用户根目录（跟刚才克隆项目同目录）下创建一个虚拟环境 env，使用如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualnev env</span><br></pre></td></tr></table></figure>\n\n<p>此时当前目录的结构是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;home&#x2F;lh&#x2F;tendcode</span><br><span class=\"line\">&#x2F;home&#x2F;lh&#x2F;talkdemo_env</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"复制虚拟环境\"><a href=\"#复制虚拟环境\" class=\"headerlink\" title=\"复制虚拟环境\"></a>复制虚拟环境</h3><p>虚拟环境虽然已经创建，但是环境中还没有安装项目的依赖，所以现在要根据项目的依赖文件去安装依赖。</p>\n<p>首先在当前用户目录下使用如下命令进入虚拟环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ source talkdemo_env&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure>\n\n<p>然后将当前目录切换到你的项目的依赖文件 requirements.txt 的目录下，比如我的项目的依赖文件就在项目的一级目录下面，比如它的地址是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;home&#x2F;lh&#x2F;tendcode&#x2F;requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>那么此时应该切换到这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(talkdemo_env) ~$ cd tendcode</span><br></pre></td></tr></table></figure>\n\n<p>然后使用如下命令安装依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(talkdemo_env) ~$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>此时，项目的基本运行条件已经准备好了，下面开始运行项目。</p>\n<h2 id=\"项目运行\"><a href=\"#项目运行\" class=\"headerlink\" title=\"项目运行\"></a>项目运行</h2><p>在部署项目之前，先要保证项目在服务器上面能够正常运行，这是最起码的条件。</p>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>如果项目同样适用的是 MySQL 数据库的话，在项目运行之前需要先创建数据库，比如我的项目中指定了数据库的基本信息，我创建数据库（进入mysql命令行下）的命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; CREATE DATABASE &#96;tendcode&#96; DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n\n<p>这句命令的意思是创建一个名称为 tendcode 的数据库，并且将数据库的编码设定为 utf8，这个按照自己的项目需求去创建即可。</p>\n<h3 id=\"迁移数据库\"><a href=\"#迁移数据库\" class=\"headerlink\" title=\"迁移数据库\"></a>迁移数据库</h3><p>现在可以按照 Django 项目的数据库迁移步骤来操作了，当然，下面的操作都是在虚拟环境中进行的。</p>\n<p>1、创建数据迁移，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(talkdemo_env) ~&#x2F;tendcode$ python manage.py makemigrations</span><br><span class=\"line\">(talkdemo_env) ~&#x2F;tendcode$ python manage.py migrate</span><br></pre></td></tr></table></figure>\n\n<p>2、创建管理员账号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(talkdemo_env) ~&#x2F;tendcode$ python manage.py createsuperuser</span><br></pre></td></tr></table></figure>\n\n<p>3、静态文件的收集：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(env) ~&#x2F;tendcode$ python manage.py collectstatic</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(env) ~&#x2F;tendcode$ python manage.py runserver 0.0.0.1:8000</span><br></pre></td></tr></table></figure>\n\n<p>如果你的服务器上面的8000端口开启了，那么可以访问你的服务器 IP 地址的8000端口看看项目是否正常运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;server_domain_or_IP:8000</span><br></pre></td></tr></table></figure>\n\n<p>到这里顺便说一下，由于我的项目是有域名的，所以在项目中要先添加自己的域名，就像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALLOWED_HOSTS &#x3D; [&#39;127.0.0.1&#39;, &#39;localhost&#39;, &#39;.tendcode.com&#39;]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h2><h3 id=\"安装和配置-Gunicorn\"><a href=\"#安装和配置-Gunicorn\" class=\"headerlink\" title=\"安装和配置 Gunicorn\"></a>安装和配置 Gunicorn</h3><p>1、首先需要在虚拟环境中安装 Gunicorn：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(env) ~&#x2F;tendcode$ pip install gunicorn</span><br></pre></td></tr></table></figure>\n\n<p>2、创建项目的 Gunicorn 配置文件（退出虚拟环境）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;gunicorn_tendcode.service</span><br></pre></td></tr></table></figure>\n\n<p>3、配置信息如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description&#x3D;gunicorn daemon</span><br><span class=\"line\">After&#x3D;network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User&#x3D;lh</span><br><span class=\"line\">Group&#x3D;www-data</span><br><span class=\"line\">WorkingDirectory&#x3D;&#x2F;home&#x2F;lh&#x2F;tendcode</span><br><span class=\"line\">ExecStart&#x3D;&#x2F;home&#x2F;lh&#x2F;env&#x2F;bin&#x2F;gunicorn --access-logfile - --workers 2 --bind unix:&#x2F;home&#x2F;lh&#x2F;tendcode&#x2F;tendcode.sock talkdemo.wsgi:application</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>上面的配置信息中需要根据自己的项目改的有以下几个地方：</p>\n<ul>\n<li>User 填写自己当前用户名称</li>\n<li>WorkingDirectory 填写项目的地址</li>\n<li>ExecStart 中第一个地址是虚拟环境中 gunicorn 的目录，所以只需要改前半部分虚拟环境的地址即可</li>\n<li>workers 2 这里是表示2个进程，可以自己改</li>\n<li>unix 这里的地址是生成一个 sock 文件的地址，直接写在项目的根目录即可</li>\n<li>talkdemo.wsgi 表示的是项目中 wsgi.py 的地址，我的项目中就是在 talkdemo 文件夹下的</li>\n</ul>\n<h3 id=\"启动配置文件\"><a href=\"#启动配置文件\" class=\"headerlink\" title=\"启动配置文件\"></a>启动配置文件</h3><p>文件配置完成之后，使用下面的命令启动服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ sudo systemctl start gunicorn_tendcode</span><br><span class=\"line\">~$ sudo systemctl enable gunicorn_tendcode</span><br></pre></td></tr></table></figure>\n\n<p>查看服务的状态可以使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ sudo systemctl status gunicorn_tendcode</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令启动没有问题可以看看自己的项目的跟目录下面，应该会多一个 tendcod.sock 文件的。</p>\n<p>后续如果对 gunicorn 配置文件做了修改，那么应该先使用这个命令之后重启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p>然后再使用重启命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ sudo systemctl restart gunicorn_tendcode</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-Nginx\"><a href=\"#配置-Nginx\" class=\"headerlink\" title=\"配置 Nginx\"></a>配置 Nginx</h3><p>首先创建一个 Nginx 配置文件，不要使用默认的那个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ sudo vi &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;mynginx</span><br></pre></td></tr></table></figure>\n\n<p>配置信息如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    # 端口和域名</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.tendcode.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 日志</span><br><span class=\"line\">    access_log &#x2F;home&#x2F;lh&#x2F;tendcode&#x2F;logs&#x2F;nginx.access.log;</span><br><span class=\"line\">    error_log &#x2F;home&#x2F;lh&#x2F;tendcode&#x2F;logs&#x2F;nginx.error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 不记录访问不到 favicon.ico 的报错日志</span><br><span class=\"line\">    location &#x3D; &#x2F;favicon.ico &#123; access_log off; log_not_found off; &#125;</span><br><span class=\"line\">    # static 和 media 的地址</span><br><span class=\"line\">    location &#x2F;static&#x2F; &#123;</span><br><span class=\"line\">        root &#x2F;home&#x2F;lh&#x2F;tendcode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location &#x2F;media&#x2F; &#123;</span><br><span class=\"line\">        root &#x2F;home&#x2F;lh&#x2F;tendcode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # gunicorn 中生成的文件的地址</span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">        include proxy_params;</span><br><span class=\"line\">        proxy_pass http:&#x2F;&#x2F;unix:&#x2F;home&#x2F;lh&#x2F;tendcode&#x2F;tendcode.sock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name tendcode.com;</span><br><span class=\"line\">    rewrite ^(.*) http:&#x2F;&#x2F;www.tendcode.com$1 permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一个 server 是主要的配置，第二 server 是实现301跳转，即让不带 www 的域名跳转到带有 www 的域名上面。</p>\n<h3 id=\"连接-Nginx-配置\"><a href=\"#连接-Nginx-配置\" class=\"headerlink\" title=\"连接 Nginx 配置\"></a>连接 Nginx 配置</h3><p>上面的配置检查好之后，使用下面的命令来将这个配置跟 Nginx 建立连接，使用命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;mynginx &#x2F;etc&#x2F;nginx&#x2F;sites-enabled</span><br></pre></td></tr></table></figure>\n\n<p>运行完毕之后可以查看一下 Nginx 的运营情况，看看会不会报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>如果上面这句没有报错，那么恭喜你，你的配置文件没有问题，可以继续下一步，如果报错了，需要按照报错的信息去更改配置文件中对应行的代码，好好检查一下吧！</p>\n<p>没报错的话，重启一下 Nginx：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<p>好了，重启 Nginx 之后可以登录自己配置的域名，看看自己的项目是不是已经成功的运行了呢！</p>\n<h2 id=\"后续维护\"><a href=\"#后续维护\" class=\"headerlink\" title=\"后续维护\"></a>后续维护</h2><p>之后的项目维护中，如果更改了 gunicorn 的配置文件，那么需要依次执行下面两条语句去重启服务，如果只是修改了 Django 项目的内容，只需要单独执行第二条重启命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ sudo systemctl daemon-reload</span><br><span class=\"line\">~$ sudo systemctl restart gunicorn_tendcode</span><br></pre></td></tr></table></figure>\n\n<p>如果修改了 Nginx 的配置文件，那么需要依次执行下面两条语句去重启服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ sudo nginx -t</span><br><span class=\"line\">~$ sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<p>以上就是我的项目部署的全部过程，希望看到这篇文章的人如果想要使用同样的方式部署 Django 项目的话，可以参考一下，有问题也可以指出。</p>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>当部署成功的时候 可能出现500的问题 可以查看nginx的日志信息。后来经过查看发现是nginx 的权限的问题 ，所以将nginx的用户改为root时或者与当前执行nginx用户一致时该问题就可以解决。</p>\n<img src=\"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/image-20201202203747670.png\" alt=\"image-20201202203747670\" style=\"zoom:80%;\" />\n\n","text":"在centos服务器上利用gunicorn+nginx+django结构部署自己的网站最近在研究如何将本地的项目部署到服务器上，踩了不少的坑，断断续续用了2天时间，着实辛苦 特来记录一下。 [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"网站开发","slug":"网站开发","count":1,"path":"api/categories/网站开发.json"}],"tags":[{"name":"-linux 服务器  -django","slug":"linux-服务器-django","count":1,"path":"api/tags/linux-服务器-django.json"}]},{"title":"线程池、Lambda表达式","slug":"线程池","date":"2020-10-05T08:14:54.441Z","updated":"2020-10-05T08:21:19.160Z","comments":true,"path":"api/articles/线程池.json","excerpt":"<hr>\n<h1 id=\"线程池、Lambda表达式\"><a href=\"#线程池、Lambda表达式\" class=\"headerlink\" title=\"线程池、Lambda表达式\"></a>线程池、Lambda表达式</h1><h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><ul>\n<li>等待与唤醒案例</li>\n<li>线程池</li>\n<li>Lambda表达式</li>\n</ul>\n<h2 id=\"教学目标\"><a href=\"#教学目标\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h2><p>-[ ] 能够理解线程通信概念<br>-[ ] 能够理解等待唤醒机制<br>-[ ] 能够描述Java中线程池运行原理<br>-[ ] 能够理解函数式编程相对于面向对象的优点<br>-[ ] 能够掌握Lambda表达式的标准格式<br>-[ ] 能够使用Lambda标准格式使用Runnable与Comparator接口<br>-[ ] 能够掌握Lambda表达式的省略格式与规则<br>-[ ] 能够使用Lambda省略格式使用Runnable与Comparator接口<br>-[ ] 能够通过Lambda的标准格式使用自定义的接口（有且仅有一个抽象方法）<br>-[ ] 能够通过Lambda的省略格式使用自定义的接口（有且仅有一个抽象方法）<br>-[ ] 能够明确Lambda的两项使用前提</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/48e34d60c8eb0868a336c4c7f0ca358b.jpg","content":null,"text":"线程池、Lambda表达式主要内容等待与唤醒案例线程池Lambda表达式教学目标-[ ] 能够理解线程通信概念<br>-[ ] 能够理解等待唤醒机制<br>-[ ] 能够描述Java中线程池运行原理<br>-[ ] 能够理解函数式编程相对于面向对象的优点<br>-[ ] 能够掌握","link":"","raw":null,"photos":[],"categories":[{"name":"Java学习","slug":"Java学习","count":3,"path":"api/categories/Java学习.json"}],"tags":[{"name":"线程池","slug":"线程池","count":1,"path":"api/tags/线程池.json"}]},{"title":"函数式接口","slug":"函数式接口","date":"2020-09-18T06:07:20.362Z","updated":"2020-09-18T06:10:14.218Z","comments":true,"path":"api/articles/函数式接口.json","excerpt":"<hr>\n<h1 id=\"【函数式接口】\"><a href=\"#【函数式接口】\" class=\"headerlink\" title=\"【函数式接口】\"></a>【函数式接口】</h1><h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><ul>\n<li><p>自定义函数式接口</p>\n</li>\n<li><p>函数式编程</p>\n</li>\n<li><p>常用函数式接口</p>\n</li>\n</ul>\n<h2 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h2><ul>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用@FunctionalInterface注解</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够自定义无参无返回函数式接口</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够自定义有参有返回函数式接口</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够理解Lambda延迟执行的特点</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Lambda作为方法的参数</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Lambda作为方法的返回值</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Supplier<T>函数式接口</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Consumer<T>函数式接口</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Function&lt;T, R&gt;函数式接口</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Predicate<T>函数式接口</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/60d4fea7ba041eaa32730221622c1a47.jpg","content":null,"text":"【函数式接口】主要内容自定义函数式接口函数式编程常用函数式接口学习目标  能够使用@FunctionalInterface注解  能够自定义无参无返回函数式接口  能够自定义有参有返回函数式接口  能够理解Lambda延迟执行的特点  能够使用Lambda作为方法的参数  能够使","link":"","raw":null,"photos":[],"categories":[{"name":"Java学习","slug":"Java学习","count":3,"path":"api/categories/Java学习.json"}],"tags":[{"name":"函数式接口","slug":"函数式接口","count":1,"path":"api/tags/函数式接口.json"}]},{"title":"Stream流、方法引用","slug":"Stream流、方法引用","date":"2020-09-17T12:45:54.088Z","updated":"2020-09-17T13:04:47.431Z","comments":true,"path":"api/articles/Stream流、方法引用.json","excerpt":"<hr>\n<h1 id=\"【Stream流、方法引用】\"><a href=\"#【Stream流、方法引用】\" class=\"headerlink\" title=\"【Stream流、方法引用】\"></a>【Stream流、方法引用】</h1><h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><ul>\n<li>Stream流</li>\n<li>方法引用</li>\n</ul>\n<h2 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 能够理解流与集合相比的优点</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够理解流的延迟执行特点</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够通过集合、映射或数组获取流</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够掌握常用的流操作</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够使用输出语句的方法引用3</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够通过4种方式使用方法引用</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够使用类和数组的构造器引用8</li>\n</ul>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/6dd81def721e4125a337ca89efaa3849.jpg","content":null,"text":"【Stream流、方法引用】主要内容Stream流方法引用学习目标 能够理解流与集合相比的优点 能够理解流的延迟执行特点 能够通过集合、映射或数组获取流 能够掌握常用的流操作 能够使用输出语句的方法引用3 能够通过4种方式使用方法引用 能够使用类和数组的构造器引用8第一章 Str","link":"","raw":null,"photos":[],"categories":[{"name":"Java学习","slug":"Java学习","count":3,"path":"api/categories/Java学习.json"}],"tags":[{"name":"Stream流","slug":"Stream流","count":1,"path":"api/tags/Stream流.json"}]},{"title":"使用阿里云搭建自己的博客","slug":"在阿里云服务器搭建自己的blog","date":"2020-09-16T07:01:39.671Z","updated":"2020-09-16T07:01:22.485Z","comments":true,"path":"api/articles/在阿里云服务器搭建自己的blog.json","excerpt":"<hr>\n<h1 id=\"使用阿里云搭建自己的博客\"><a href=\"#使用阿里云搭建自己的博客\" class=\"headerlink\" title=\"使用阿里云搭建自己的博客\"></a>使用阿里云搭建自己的博客</h1><p>这篇文章主要介绍如何在阿里云服务器上搭建自己的博客，之前的博客是基于hexo和node.js搭建在github上的。笔者现在将网站迁移到自己的阿里云服务器上。</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/003dd00372c3f98156512c62afe559cc.jpg","content":null,"text":"使用阿里云搭建自己的博客这篇文章主要介绍如何在阿里云服务器上搭建自己的博客，之前的博客是基于hexo和node.js搭建在github上的。笔者现在将网站迁移到自己的阿里云服务器上。准备工作在开始之前我们需要先购买阿里云的服务器，以及下载好hexo软件如何现在在之前的blog中有","link":"","raw":null,"photos":[],"categories":[{"name":"hexo网站搭建","slug":"hexo网站搭建","count":5,"path":"api/categories/hexo网站搭建.json"}],"tags":[{"name":"hexo+github搭建网站 -阿里云服务器","slug":"hexo-github搭建网站-阿里云服务器","count":1,"path":"api/tags/hexo-github搭建网站-阿里云服务器.json"}]},{"title":"安卓贪吃蛇小游戏实现","slug":"安卓贪吃蛇实现","date":"2020-09-14T06:44:12.118Z","updated":"2020-09-16T04:40:22.730Z","comments":true,"path":"api/articles/安卓贪吃蛇实现.json","excerpt":"<hr>\n<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a><strong>1.</strong> <strong>概述</strong></h1><h2 id=\"1-1-项目背景\"><a href=\"#1-1-项目背景\" class=\"headerlink\" title=\"1.1 项目背景\"></a>1.1 项目背景</h2><p>  近年来随着手机技术的不断发展古老的贪吃蛇游戏不能给与广大青少年的良好游戏体验，所以本文再基于古老的贪吃蛇游戏上对游戏进行了改进使得玩法更加多样有趣。</p>\n<h2 id=\"1-2-研究的主要内容\"><a href=\"#1-2-研究的主要内容\" class=\"headerlink\" title=\"1.2 研究的主要内容\"></a>1.2 研究的主要内容</h2><p>  研究的主要内容包括对蛇如何进行控制，实现食物的随机生成，并且对蛇可以进行加速控制。游戏得分等</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/11634944-821ad04eda1da070.jpg","content":null,"text":"1. 概述1.1 项目背景  近年来随着手机技术的不断发展古老的贪吃蛇游戏不能给与广大青少年的良好游戏体验，所以本文再基于古老的贪吃蛇游戏上对游戏进行了改进使得玩法更加多样有趣。1.2 研究的主要内容  研究的主要内容包括对蛇如何进行控制，实现食物的随机生成，并且对蛇可以进行加速","link":"","raw":null,"photos":[],"categories":[{"name":"android开发","slug":"android开发","count":1,"path":"api/categories/android开发.json"}],"tags":[{"name":"小游戏","slug":"小游戏","count":2,"path":"api/tags/小游戏.json"},{"name":"安卓开发","slug":"安卓开发","count":1,"path":"api/tags/安卓开发.json"}]},{"title":"偏微分方程的数值解","slug":"偏微分方程的数值解","date":"2020-09-14T06:44:12.117Z","updated":"2020-09-16T04:40:46.691Z","comments":true,"path":"api/articles/偏微分方程的数值解.json","excerpt":"<hr>\n<p>Matlab提供了两种方法解决PDE问题  一是pdepe函数可以求解一般的PDEs，具有较大的通用性但是只支持命令行调用二是pde工具箱，可以求解特殊的pde问题，但是具有较大的局限性比如只能求解二阶的pde问题，并且不能解决偏微分方程组，但他提供了GUI界面。简化了操作并且可以通过FILE-&gt;Save As生成M文件</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/11634944-586ff2e2a0e47207.png","content":null,"text":"Matlab提供了两种方法解决PDE问题  一是pdepe函数可以求解一般的PDEs，具有较大的通用性但是只支持命令行调用二是pde工具箱，可以求解特殊的pde问题，但是具有较大的局限性比如只能求解二阶的pde问题，并且不能解决偏微分方程组，但他提供了GUI界面。简化了操作并且可","link":"","raw":null,"photos":[],"categories":[{"name":"数学建模","slug":"数学建模","count":2,"path":"api/categories/数学建模.json"}],"tags":[{"name":"数学","slug":"数学","count":1,"path":"api/tags/数学.json"},{"name":"偏微分方程","slug":"偏微分方程","count":1,"path":"api/tags/偏微分方程.json"}]},{"title":"使用Hexo+Github重新搭建自己的个人网站","slug":"使用Hexo+Github重新搭建自己的个人网站","date":"2020-09-14T06:44:12.115Z","updated":"2020-09-16T07:02:20.451Z","comments":true,"path":"api/articles/使用Hexo+Github重新搭建自己的个人网站.json","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>经过自己探索，笔者终于搭建好了自己的个人主页，过程是蛮艰辛的，在这里特地和大家分享一下自己的经验。</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/11634944-403c6d5f3e68592a.jpg","content":null,"text":"前言经过自己探索，笔者终于搭建好了自己的个人主页，过程是蛮艰辛的，在这里特地和大家分享一下自己的经验。 [Figure] 恭喜你已经成功了！","link":"","raw":null,"photos":[],"categories":[{"name":"hexo网站搭建","slug":"hexo网站搭建","count":5,"path":"api/categories/hexo网站搭建.json"}],"tags":[{"name":"hexo+github搭建网站","slug":"hexo-github搭建网站","count":3,"path":"api/tags/hexo-github搭建网站.json"}]},{"title":"使用Hexo+Github搭建自己的个人网站","slug":"使用Hexo+Github搭建自己的个人网站","date":"2020-09-14T06:44:12.114Z","updated":"2020-09-16T04:42:21.328Z","comments":true,"path":"api/articles/使用Hexo+Github搭建自己的个人网站.json","excerpt":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>经过自己探索，笔者终于搭建好了自己的个人主页，过程是蛮艰辛的，在这里特地和大家分享一下自己的经验。</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/11634944-403c6d5f3e68592a.jpg","content":null,"text":"前言经过自己探索，笔者终于搭建好了自己的个人主页，过程是蛮艰辛的，在这里特地和大家分享一下自己的经验。 [Figure] 恭喜你已经成功了！","link":"","raw":null,"photos":[],"categories":[{"name":"hexo网站搭建","slug":"hexo网站搭建","count":5,"path":"api/categories/hexo网站搭建.json"}],"tags":[{"name":"hexo+github搭建网站","slug":"hexo-github搭建网站","count":3,"path":"api/tags/hexo-github搭建网站.json"}]},{"title":"“葱的战争”一个有趣的小游戏的背后的逻辑","slug":"“葱的战争”一个有趣的小游戏的背后的逻辑","date":"2020-09-14T06:44:12.112Z","updated":"2020-09-16T03:42:22.551Z","comments":true,"path":"api/articles/“葱的战争”一个有趣的小游戏的背后的逻辑.json","excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>前短时间，同学给看了一道，某个历年的考研机试题。我想用面向对象的方法去实现。</p>\n<blockquote>\n<p>一个m*n的棋盘，上面有k根葱，每根葱面朝方向为d（0123分别表示上下左右），每根葱一个战斗力f。每隔时间葱会向面朝方向走一格， 如果遇到棋盘边界，那么他将把面朝方向转180度（此回合葱不会走动），如果某个时刻有两个或以上的葱在同一位置，那么他们将发生 战争，只有战斗力最高的葱存活，其他的葱全部原地枯萎，不在走动，求经过t时间后所有葱的位置。</p>\n</blockquote>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/20200916113748.png","content":null,"text":"题目前短时间，同学给看了一道，某个历年的考研机试题。我想用面向对象的方法去实现。一个m*n的棋盘，上面有k根葱，每根葱面朝方向为d（0123分别表示上下左右），每根葱一个战斗力f。每隔时间葱会向面朝方向走一格， 如果遇到棋盘边界，那么他将把面朝方向转180度（此回合葱不会走动），","link":"","raw":null,"photos":[],"categories":[{"name":"JAVA语言","slug":"JAVA语言","count":1,"path":"api/categories/JAVA语言.json"}],"tags":[{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"},{"name":"小游戏","slug":"小游戏","count":2,"path":"api/tags/小游戏.json"}]}]}