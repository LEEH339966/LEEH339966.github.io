{"total":15,"pageSize":10,"pageCount":2,"data":[{"title":"在centos服务器上利用gunicorn+nginx+django结构部署自己的网站","slug":"在centos服务器上利用gunicorn+nginx+django结构部署自己的网站","date":"2020-12-02T12:44:27.000Z","updated":"2020-12-03T03:46:55.778Z","comments":true,"path":"api/articles/在centos服务器上利用gunicorn+nginx+django结构部署自己的网站.json","excerpt":"<hr>\n<p>最近在研究如何将本地的项目部署到服务器上，踩了不少的坑，断断续续用了2天时间，着实辛苦 特来记录一下。</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/37f2656b96ebcd22dab05f4c0892bcc4.jpg","content":null,"text":"最近在研究如何将本地的项目部署到服务器上，踩了不少的坑，断断续续用了2天时间，着实辛苦 特来记录一下。 [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"网站开发","slug":"网站开发","count":1,"path":"api/categories/网站开发.json"}],"tags":[{"name":"-linux 服务器  -django","slug":"linux-服务器-django","count":1,"path":"api/tags/linux-服务器-django.json"}]},{"title":"线程池、Lambda表达式","slug":"线程池","date":"2020-10-05T05:57:40.000Z","updated":"2020-12-03T03:42:37.627Z","comments":true,"path":"api/articles/线程池.json","excerpt":"<hr>\n<h1 id=\"线程池、Lambda表达式\"><a href=\"#线程池、Lambda表达式\" class=\"headerlink\" title=\"线程池、Lambda表达式\"></a>线程池、Lambda表达式</h1><h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><ul>\n<li>等待与唤醒案例</li>\n<li>线程池</li>\n<li>Lambda表达式</li>\n</ul>\n<h2 id=\"教学目标\"><a href=\"#教学目标\" class=\"headerlink\" title=\"教学目标\"></a>教学目标</h2><p>-[ ] 能够理解线程通信概念<br>-[ ] 能够理解等待唤醒机制<br>-[ ] 能够描述Java中线程池运行原理<br>-[ ] 能够理解函数式编程相对于面向对象的优点<br>-[ ] 能够掌握Lambda表达式的标准格式<br>-[ ] 能够使用Lambda标准格式使用Runnable与Comparator接口<br>-[ ] 能够掌握Lambda表达式的省略格式与规则<br>-[ ] 能够使用Lambda省略格式使用Runnable与Comparator接口<br>-[ ] 能够通过Lambda的标准格式使用自定义的接口（有且仅有一个抽象方法）<br>-[ ] 能够通过Lambda的省略格式使用自定义的接口（有且仅有一个抽象方法）<br>-[ ] 能够明确Lambda的两项使用前提</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/48e34d60c8eb0868a336c4c7f0ca358b.jpg","content":null,"text":"线程池、Lambda表达式主要内容等待与唤醒案例线程池Lambda表达式教学目标-[ ] 能够理解线程通信概念<br>-[ ] 能够理解等待唤醒机制<br>-[ ] 能够描述Java中线程池运行原理<br>-[ ] 能够理解函数式编程相对于面向对象的优点<br>-[ ] 能够掌握","link":"","raw":null,"photos":[],"categories":[{"name":"Java学习","slug":"Java学习","count":3,"path":"api/categories/Java学习.json"}],"tags":[{"name":"线程池","slug":"线程池","count":1,"path":"api/tags/线程池.json"}]},{"title":"函数式接口","slug":"函数式接口","date":"2020-09-18T05:57:40.000Z","updated":"2020-12-03T03:41:38.548Z","comments":true,"path":"api/articles/函数式接口.json","excerpt":"<hr>\n<h1 id=\"【函数式接口】\"><a href=\"#【函数式接口】\" class=\"headerlink\" title=\"【函数式接口】\"></a>【函数式接口】</h1><h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><ul>\n<li><p>自定义函数式接口</p>\n</li>\n<li><p>函数式编程</p>\n</li>\n<li><p>常用函数式接口</p>\n</li>\n</ul>\n<h2 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h2><ul>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用@FunctionalInterface注解</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够自定义无参无返回函数式接口</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够自定义有参有返回函数式接口</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够理解Lambda延迟执行的特点</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Lambda作为方法的参数</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Lambda作为方法的返回值</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Supplier<T>函数式接口</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Consumer<T>函数式接口</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Function&lt;T, R&gt;函数式接口</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  能够使用Predicate<T>函数式接口</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/60d4fea7ba041eaa32730221622c1a47.jpg","content":null,"text":"【函数式接口】主要内容自定义函数式接口函数式编程常用函数式接口学习目标  能够使用@FunctionalInterface注解  能够自定义无参无返回函数式接口  能够自定义有参有返回函数式接口  能够理解Lambda延迟执行的特点  能够使用Lambda作为方法的参数  能够使","link":"","raw":null,"photos":[],"categories":[{"name":"Java学习","slug":"Java学习","count":3,"path":"api/categories/Java学习.json"}],"tags":[{"name":"函数式接口","slug":"函数式接口","count":1,"path":"api/tags/函数式接口.json"}]},{"title":"Stream流、方法引用","slug":"Stream流、方法引用","date":"2020-09-17T12:48:08.000Z","updated":"2020-12-03T03:41:01.202Z","comments":true,"path":"api/articles/Stream流、方法引用.json","excerpt":"<hr>\n<h1 id=\"【Stream流、方法引用】\"><a href=\"#【Stream流、方法引用】\" class=\"headerlink\" title=\"【Stream流、方法引用】\"></a>【Stream流、方法引用】</h1><h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><ul>\n<li>Stream流</li>\n<li>方法引用</li>\n</ul>\n<h2 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 能够理解流与集合相比的优点</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够理解流的延迟执行特点</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够通过集合、映射或数组获取流</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够掌握常用的流操作</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够使用输出语句的方法引用3</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够通过4种方式使用方法引用</li>\n<li><input disabled=\"\" type=\"checkbox\"> 能够使用类和数组的构造器引用8</li>\n</ul>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/6dd81def721e4125a337ca89efaa3849.jpg","content":null,"text":"【Stream流、方法引用】主要内容Stream流方法引用学习目标 能够理解流与集合相比的优点 能够理解流的延迟执行特点 能够通过集合、映射或数组获取流 能够掌握常用的流操作 能够使用输出语句的方法引用3 能够通过4种方式使用方法引用 能够使用类和数组的构造器引用8第一章 Str","link":"","raw":null,"photos":[],"categories":[{"name":"Java学习","slug":"Java学习","count":3,"path":"api/categories/Java学习.json"}],"tags":[{"name":"Stream流","slug":"Stream流","count":1,"path":"api/tags/Stream流.json"}]},{"title":"使用阿里云搭建自己的博客","slug":"在阿里云服务器搭建自己的blog","date":"2020-09-16T07:01:39.671Z","updated":"2020-12-03T03:47:13.860Z","comments":true,"path":"api/articles/在阿里云服务器搭建自己的blog.json","excerpt":"<hr>\n<h1 id=\"使用阿里云搭建自己的博客\"><a href=\"#使用阿里云搭建自己的博客\" class=\"headerlink\" title=\"使用阿里云搭建自己的博客\"></a>使用阿里云搭建自己的博客</h1><p>这篇文章主要介绍如何在阿里云服务器上搭建自己的博客，之前的博客是基于hexo和node.js搭建在github上的。笔者现在将网站迁移到自己的阿里云服务器上。</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/003dd00372c3f98156512c62afe559cc.jpg","content":null,"text":"使用阿里云搭建自己的博客这篇文章主要介绍如何在阿里云服务器上搭建自己的博客，之前的博客是基于hexo和node.js搭建在github上的。笔者现在将网站迁移到自己的阿里云服务器上。准备工作在开始之前我们需要先购买阿里云的服务器，以及下载好hexo软件如何现在在之前的blog中有","link":"","raw":null,"photos":[],"categories":[{"name":"hexo网站搭建","slug":"hexo网站搭建","count":5,"path":"api/categories/hexo网站搭建.json"}],"tags":[{"name":"hexo+github搭建网站 -阿里云服务器","slug":"hexo-github搭建网站-阿里云服务器","count":1,"path":"api/tags/hexo-github搭建网站-阿里云服务器.json"}]},{"title":"使用Hexo+Github重新搭建自己的个人网站","slug":"重新搭建自己的个人网站","date":"2019-09-06T14:18:31.000Z","updated":"2020-12-03T03:48:46.702Z","comments":true,"path":"api/articles/重新搭建自己的个人网站.json","excerpt":"<pre><code> - hexo+github搭建网站</code></pre>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>经过自己探索，笔者终于搭建好了自己的个人主页，过程是蛮艰辛的，在这里特地和大家分享一下自己的经验。</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/4769624e404775ab1f8e0ccdacb73671.jpg","content":null,"text":" - hexo+github搭建网站前言经过自己探索，笔者终于搭建好了自己的个人主页，过程是蛮艰辛的，在这里特地和大家分享一下自己的经验。 [Figure] 恭喜你已经成功了！","link":"","raw":null,"photos":[],"categories":[{"name":"hexo网站搭建","slug":"hexo网站搭建","count":5,"path":"api/categories/hexo网站搭建.json"}],"tags":[]},{"title":"Git入门","slug":"Git入门","date":"2018-06-24T13:19:10.000Z","updated":"2020-12-03T03:40:12.898Z","comments":true,"path":"api/articles/Git入门.json","excerpt":"<hr>\n<h2 id=\"Git入门\"><a href=\"#Git入门\" class=\"headerlink\" title=\"Git入门\"></a>Git入门</h2><p>如果你完全没有接触过Git，你现在只需要理解通过Git的语法（敲入一些命令）就可以将代码上传到远程的仓库或者下载到本地的仓库（服务器），可知我们此时应该有两个仓库，就是两个放代码的地方，一个是本地，一个是远程的(如Github)。企业或者团队可以通过Git来对项目进行管理，每个程序员只需将自己的本地仓库写好的代码上传到远程仓库，另一个程序员就可以下载到本地仓库了。今天我们就从Git终端软件的安装开始，再这之前我也简单介绍一下Github。</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/20200916113518.png","content":null,"text":"Git入门如果你完全没有接触过Git，你现在只需要理解通过Git的语法（敲入一些命令）就可以将代码上传到远程的仓库或者下载到本地的仓库（服务器），可知我们此时应该有两个仓库，就是两个放代码的地方，一个是本地，一个是远程的(如Github)。企业或者团队可以通过Git来对项目进行管","link":"","raw":null,"photos":[],"categories":[{"name":"hexo网站搭建","slug":"hexo网站搭建","count":5,"path":"api/categories/hexo网站搭建.json"}],"tags":[{"name":"Git入门","slug":"Git入门","count":1,"path":"api/tags/Git入门.json"}]},{"title":"安卓贪吃蛇小游戏实现","slug":"安卓贪吃蛇实现","date":"2018-06-22T11:38:44.000Z","updated":"2020-12-03T03:41:22.566Z","comments":true,"path":"api/articles/安卓贪吃蛇实现.json","excerpt":"<hr>\n<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a><strong>1.</strong> <strong>概述</strong></h1><h2 id=\"1-1-项目背景\"><a href=\"#1-1-项目背景\" class=\"headerlink\" title=\"1.1 项目背景\"></a>1.1 项目背景</h2><p>  近年来随着手机技术的不断发展古老的贪吃蛇游戏不能给与广大青少年的良好游戏体验，所以本文再基于古老的贪吃蛇游戏上对游戏进行了改进使得玩法更加多样有趣。</p>\n<h2 id=\"1-2-研究的主要内容\"><a href=\"#1-2-研究的主要内容\" class=\"headerlink\" title=\"1.2 研究的主要内容\"></a>1.2 研究的主要内容</h2><p>  研究的主要内容包括对蛇如何进行控制，实现食物的随机生成，并且对蛇可以进行加速控制。游戏得分等</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/11634944-821ad04eda1da070.jpg","content":null,"text":"1. 概述1.1 项目背景  近年来随着手机技术的不断发展古老的贪吃蛇游戏不能给与广大青少年的良好游戏体验，所以本文再基于古老的贪吃蛇游戏上对游戏进行了改进使得玩法更加多样有趣。1.2 研究的主要内容  研究的主要内容包括对蛇如何进行控制，实现食物的随机生成，并且对蛇可以进行加速","link":"","raw":null,"photos":[],"categories":[{"name":"android开发","slug":"android开发","count":1,"path":"api/categories/android开发.json"}],"tags":[{"name":"小游戏","slug":"小游戏","count":2,"path":"api/tags/小游戏.json"},{"name":"安卓开发","slug":"安卓开发","count":1,"path":"api/tags/安卓开发.json"}]},{"title":"shell程序设计","slug":"shell程序设计","date":"2018-06-17T14:35:00.000Z","updated":"2020-12-03T03:40:46.637Z","comments":true,"path":"api/articles/shell程序设计.json","excerpt":"<hr>\n<hr>\n<h1 id=\"shell脚本的建立与执行\"><a href=\"#shell脚本的建立与执行\" class=\"headerlink\" title=\"shell脚本的建立与执行\"></a>shell脚本的建立与执行</h1><p>shell是一个交互式的命令解释程序，同时也是一个脚本式程序设计语言，shell是Unix/Linux系统的标准组成部分，在多年的发展和完善过程中，shell形成了很多版本，现在较为流行的有sh、bash、csh和ksh，各个版本之间存在着不兼容的问题，本章主要介绍bash的程序设计。</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/df4fecb7ab331a36435209eb7248146f.jpg","content":null,"text":"shell脚本的建立与执行shell是一个交互式的命令解释程序，同时也是一个脚本式程序设计语言，shell是Unix/Linux系统的标准组成部分，在多年的发展和完善过程中，shell形成了很多版本，现在较为流行的有sh、bash、csh和ksh，各个版本之间存在着不兼容的问题，","link":"","raw":null,"photos":[],"categories":[{"name":"SHELL程序设计","slug":"SHELL程序设计","count":1,"path":"api/categories/SHELL程序设计.json"}],"tags":[{"name":"SHELL程序设计","slug":"SHELL程序设计","count":1,"path":"api/tags/SHELL程序设计.json"}]},{"title":"WEKA把分类(Classification)和回归(Regression)","slug":"WEKA把分类(Classification)和回归(Regression)","date":"2018-06-17T03:22:08.000Z","updated":"2020-12-03T03:41:11.869Z","comments":true,"path":"api/articles/WEKA把分类(Classification)和回归(Regression).json","excerpt":"<hr>\n<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1 简介\"></a>1 简介</h3><p>WEKA把分类(Classification)和回归(Regression)都放在“Classify”选项卡中，我们希望根据一个样本的一组特征，对目标进行预测。为了实现这一目的， 我们需要有一个训练数据集，这个数据集中每个实例的输入和输出都是已知的。观察训练集中的实例，可以建立起预测的模型。有了这个模型，我们就可以新的输出未知的实例进行预测了，衡量模型的好坏就在于预测的准确程度。 </p>\n<p>在WEKA中，待预测的目标（输出）被称作Class属性，这应该是来自分类任务的“类”。一般的，若Class属性是分类型时我们的任务才叫分类，Class属性是数值型时我们的任务叫回归。</p>\n<p>这里介绍用C4.5决策树算法对数据建立起分类模型，C4.5算法可以处理数值型的属性。</p>\n<p>首先选择数据源，然后切换到“Classify”选项卡，点击“Choose”按钮后可以看到很多分类或者回归的算法分门别类在一个树型框里。 树型框下方有一个“Filter…”按钮，点击可以根据数据集的特性过滤掉不合适的算法。选择“trees”下的“J48”，这就是需要的C4.5算法。 </p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/1d95e6a89ff1261aa812002b7c063e1e.jpg","content":null,"text":"1 简介WEKA把分类(Classification)和回归(Regression)都放在“Classify”选项卡中，我们希望根据一个样本的一组特征，对目标进行预测。为了实现这一目的， 我们需要有一个训练数据集，这个数据集中每个实例的输入和输出都是已知的。观察训练集中的实例，可","link":"","raw":null,"photos":[],"categories":[{"name":"数学建模","slug":"数学建模","count":2,"path":"api/categories/数学建模.json"}],"tags":[{"name":"WEKA","slug":"WEKA","count":1,"path":"api/tags/WEKA.json"},{"name":"分类与回归","slug":"分类与回归","count":1,"path":"api/tags/分类与回归.json"}]}]}