{"name":"前端框架vue","slug":"前端框架vue","count":1,"postlist":[{"title":"VUEJS前端框架学习总结","slug":"VUEJS前端框架学习总结","date":"2020-12-27T13:22:35.000Z","updated":"2020-12-27T13:30:25.917Z","comments":true,"path":"api/articles/VUEJS前端框架学习总结.json","excerpt":"<hr>\n<h2 id=\"VUE前端框架学习总结\"><a href=\"#VUE前端框架学习总结\" class=\"headerlink\" title=\"VUE前端框架学习总结\"></a>VUE前端框架学习总结</h2><h3 id=\"1-vuejs的概述\"><a href=\"#1-vuejs的概述\" class=\"headerlink\" title=\"1.vuejs的概述\"></a>1.vuejs的概述</h3><h4 id=\"1-1vuejs的介绍\"><a href=\"#1-1vuejs的介绍\" class=\"headerlink\" title=\"1.1vuejs的介绍\"></a>1.1vuejs的介绍</h4><p>Vue.js是一个构建数据驱动的 web 界面的渐进式框架。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑<br>定和组合的视图组件。它不仅易于上手，还便于与第三方库或既有项目整合。<br>官网:<a href=\"https://cn.vuejs.org/\">https://cn.vuejs.org</a>  </p>\n<h4 id=\"1-2-MVVM模式\"><a href=\"#1-2-MVVM模式\" class=\"headerlink\" title=\"1.2 MVVM模式\"></a>1.2 MVVM模式</h4><p>MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的View 的状态和行为<br>抽象化，让我们将视图 UI 和业务逻辑分开<br>MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model）<br>Vue.js 是一个提供了 MVVM 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，<br>也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性，这种轻量级的架构让前端<br>开发更加高效、便捷  。</p>","keywords":null,"cover":"https://leehbucket1.oss-cn-beijing.aliyuncs.com/img/5a638e37c2073daecfbd650bb013e8f4.jpg","content":null,"text":"VUE前端框架学习总结1.vuejs的概述1.1vuejs的介绍Vue.js是一个构建数据驱动的 web 界面的渐进式框架。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑<br>定和组合的视图组件。它不仅易于上手，还便于与第三方库或既有项目整合。<br>官网:h","link":"","raw":null,"photos":[],"categories":[{"name":"Java学习","slug":"Java学习","count":4,"path":"api/categories/Java学习.json"}],"tags":[{"name":"前端框架vue","slug":"前端框架vue","count":1,"path":"api/tags/前端框架vue.json"}]}]}